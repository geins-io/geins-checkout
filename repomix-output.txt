This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-07T11:35:16.501Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.github/
  workflows/
    release-azure-swa-next.yml
app/
  assets/
    css/
      tailwind.css
    icons/
      loading.svg
    images/
      placeholder.svg
    logos/
      geins-g.svg
      geins.svg
  components/
    ui/
      alert/
        Alert.vue
        AlertDescription.vue
        AlertTitle.vue
        index.ts
      avatar/
        Avatar.vue
        AvatarFallback.vue
        AvatarImage.vue
        index.ts
      button/
        Button.vue
        index.ts
      card/
        Card.vue
        CardContent.vue
        CardDescription.vue
        CardFooter.vue
        CardHeader.vue
        CardTitle.vue
        index.ts
      checkbox/
        Checkbox.vue
        index.ts
      form/
        FormControl.vue
        FormDescription.vue
        FormItem.vue
        FormLabel.vue
        FormMessage.vue
        index.ts
        injectionKeys.ts
        useFormField.ts
      input/
        index.ts
        Input.vue
      label/
        index.ts
        Label.vue
      skeleton/
        index.ts
        Skeleton.vue
      switch/
        index.ts
        Switch.vue
      textarea/
        index.ts
        Textarea.vue
    BottomUrls.vue
    Cart.vue
    CartSummary.vue
    CheckoutForm.vue
    ContentSwitch.vue
    ExternalSnippet.vue
    Header.vue
    Loading.vue
    ManualCheckout.vue
  composables/
    useCheckout.ts
    useCheckoutToken.ts
    useExternalSnippet.ts
    useGeinsClient.ts
    useGeinsLog.ts
    usePrice.ts
    useSummary.ts
  lang/
    en-US.ts
  layouts/
    confirm.vue
    default.vue
  lib/
    utils.ts
  middleware/
    default.global.ts
  pages/
    v0/
      checkout/
        [token].vue
      thank-you/
        [token]/
          [orderId].vue
    index.vue
    redirect.vue
  plugins/
    geins-core.ts
  utils/
    index.ts
  app.vue
  error.vue
  router.options.ts
public/
  placeholder.svg
  robots.txt
shared/
  types/
    checkout.ts
    composables.ts
    index.ts
  utils/
    log.ts
test/
  e2e-klarna.test.ts
  vitest.setup.ts
.gitignore
.prettierrc
.yarnrc.yml
components.json
eslint.config.js
geins-checkout.code-workspace
LICENSE
nuxt.config.ts
package.json
README.md
staticwebapp.config.json
tailwind.config.js
TODO.md
tsconfig.json
vitest.config.ts

================================================================
Repository Files
================================================================

================
File: .github/workflows/release-azure-swa-next.yml
================
name: CI Release Next to Azure SWA
on:
  push:
    branches:
      - next

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    env:
      GEINS_DEBUG: ${{ vars.GEINS_DEBUG }}
      NITRO_PRESET: ${{ vars.NITRO_PRESET_AZURE_SWA }}
      LATEST_VERSION: ${{ vars.LATEST_VERSION }}
      BASE_URL: ${{ vars.BASE_URL }}
      PRODUCT_IMAGE_DOMAIN: ${{ vars.PRODUCT_IMAGE_DOMAIN }}
      PRODUCT_IMAGE_BASE_URL: ${{ vars.PRODUCT_IMAGE_BASE_URL }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_VICTORIOUS_SEA_0BEE71803 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: 'upload'
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_build_command: 'yarn build'
          app_location: '/' # App source code path
          api_location: '.output/server' # Api source code path - optional
          output_location: '.output/public' # Built app content directory - optional
          ###### End of Repository/Build Configurations ######

================
File: app/assets/css/tailwind.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 97%;
    --foreground: 0 0% 19%;

    --card: 0 0% 100%;
    --card-foreground: 0 0% 19%;

    --accent: 0 0% 19%;
    --accent-foreground: 100 100% 100%;

    --border: 0 0% 92%;
    --sale: 0 100% 45%;
    --error: 349 100% 35%;

    --radius: 0.5rem;
    --logo-size: 2rem;
    --font-size: 1rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-body text-foreground;
  }
}

================
File: app/assets/icons/loading.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24">
    <rect width="10" height="10" x="1" y="1" fill="currentColor" rx="1">
      <animate
        id="svgSpinnersBlocksShuffle30"
        fill="freeze"
        attributeName="x"
        begin="0;svgSpinnersBlocksShuffle3b.end"
        dur="0.2s"
        values="1;13"
      />
      <animate
        id="svgSpinnersBlocksShuffle31"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle38.end"
        dur="0.2s"
        values="1;13"
      />
      <animate
        id="svgSpinnersBlocksShuffle32"
        fill="freeze"
        attributeName="x"
        begin="svgSpinnersBlocksShuffle39.end"
        dur="0.2s"
        values="13;1"
      />
      <animate
        id="svgSpinnersBlocksShuffle33"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle3a.end"
        dur="0.2s"
        values="13;1"
      />
    </rect>
    <rect width="10" height="10" x="1" y="13" fill="currentColor" rx="1">
      <animate
        id="svgSpinnersBlocksShuffle34"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle30.end"
        dur="0.2s"
        values="13;1"
      />
      <animate
        id="svgSpinnersBlocksShuffle35"
        fill="freeze"
        attributeName="x"
        begin="svgSpinnersBlocksShuffle31.end"
        dur="0.2s"
        values="1;13"
      />
      <animate
        id="svgSpinnersBlocksShuffle36"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle32.end"
        dur="0.2s"
        values="1;13"
      />
      <animate
        id="svgSpinnersBlocksShuffle37"
        fill="freeze"
        attributeName="x"
        begin="svgSpinnersBlocksShuffle33.end"
        dur="0.2s"
        values="13;1"
      />
    </rect>
    <rect width="10" height="10" x="13" y="13" fill="currentColor" rx="1">
      <animate
        id="svgSpinnersBlocksShuffle38"
        fill="freeze"
        attributeName="x"
        begin="svgSpinnersBlocksShuffle34.end"
        dur="0.2s"
        values="13;1"
      />
      <animate
        id="svgSpinnersBlocksShuffle39"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle35.end"
        dur="0.2s"
        values="13;1"
      />
      <animate
        id="svgSpinnersBlocksShuffle3a"
        fill="freeze"
        attributeName="x"
        begin="svgSpinnersBlocksShuffle36.end"
        dur="0.2s"
        values="1;13"
      />
      <animate
        id="svgSpinnersBlocksShuffle3b"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle37.end"
        dur="0.2s"
        values="1;13"
      />
    </rect>
  </svg>

================
File: app/assets/images/placeholder.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

================
File: app/assets/logos/geins-g.svg
================
<svg viewBox="0 0 145.3 271.92707774798924" style="max-height: 500px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" width="145.3" height="271.92707774798924"><path d="M292.6 133.4c-10 0-18.1 8.1-18.1 18.1v.2c.3 4.1-.7 7.4-2.9 9.7-3.4 3.6-8.9 4.4-10.9 4.5h-33.3c-.1 0-7.5-.1-11.7-4.5-2.2-2.3-3.2-5.6-2.9-9.7V86.8c-.3-4.1.7-7.4 2.9-9.7 4.2-4.5 11.6-4.5 11.7-4.5H261.7c5.9.9 11.9 4.6 12.3 13.3v.1c.9 12.6-6.4 15-12 15.3-.9 0-17.4-.1-17.4-.1-10 0-18.1 8.1-18.1 18.1s8.1 18.2 18.1 18.2h15.3c10 0 18.1-8.1 18.1-18.2 0-.4.1-1.5.1-1.8 1.2-12.4 10.9-11.8 14.1-12.3h.2c10 0 18.1-8.1 18.1-18.1S302.4 69 292.4 69h-.2c-2.7 0-13.2-.5-14.2-12.6v-2.2c0-10-8.1-17.8-18.1-17.8h-32.5c-10 0-18.1 8.1-18.1 18-1.6 14.7-13.3 14.6-14.6 14.5h-.2c-10 0-18.1 8.1-18.1 18.1v64.5c0 10 8.1 18.1 18.1 18.1h.2c1.3-.1 13-.2 14.4 14.6.1 8.4 5.8 15.4 13.6 17.4.2 0 .4.1.5.1.3.1.6.1.9.2 1.1.2 2.1.4 3.3.4h32.5c10 0 18.1-8.1 18.1-18 1.4-14.8 13.1-14.7 14.4-14.6h.2c10 0 18.1-8.1 18.1-18.1s-8.1-18.2-18.1-18.2zM536.9 68.5h-.2c-1.3.1-13 .2-14.4-14.6-.1-7.3-4.5-13.6-10.7-16.4 0 0-2.7-1.6-7.2-1.6H472c-10 0-18.1 8.1-18.1 18-1.4 14.8-13.1 14.7-14.4 14.6h-.2c-10 0-18.1 8.1-18.1 18.1v97.2c0 10 8.1 18.1 18.1 18.1s18.1-8.1 18.1-18.1V86.5c-.3-4.1.7-7.4 2.9-9.7 4.2-4.5 11.6-4.5 11.7-4.5h32.2c.1 0 7.5.1 11.7 4.5 2.2 2.3 3.2 5.6 2.9 9.7v65c0 .1-.1 7.5-4.5 11.7-2.3 2.2-5.6 3.2-9.7 2.9h-.2c-10 0-18.1 8.1-18.1 18.1s8.1 18.1 18.1 18.1 18.1-8.1 18.1-18.1v-.2c-.1-1.3-.2-13 14.6-14.4 9.9-.1 18-8.2 18-18.1V86.7c0-10-8.2-18.2-18.2-18.2zM365.7 82.1c-10 0-18.1 8.1-18.1 18.1v84c0 10 8.1 18.1 18.1 18.1s18.1-8.1 18.1-18.1v-84c.1-10-8.1-18.1-18.1-18.1zM708.4 133.8h-.2c-.5 0-13 .6-14.4-14.7v-.2c-.3-9.7-8.4-17.6-18.1-17.6h-32.6c-.8 0-7.6-.3-11.6-4.5-2.2-2.3-2.9-5.6-2.9-9.7v-.4c0-4.1.7-7.4 2.9-9.7 4.2-4.5 11.6-4.5 11.7-4.5h32.3c10 0 18.2-8.1 18.2-18.2V54h.1c-.2-9.8-8.2-17.8-18.1-17.8h-32.5c-10 0-18.1 8.1-18.1 18-1.4 14.8-13.1 14.7-14.4 14.6h-.2c-10 0-18.1 8.1-18.1 18.1s8.1 18.1 18.1 18.1h.2c.5 0 12.9-.6 14.4 14.6.1 9.9 8.2 18 18.1 18h32.5c.5 0 7.5.1 11.7 4.5 2.2 2.3 2.9 5 2.9 9.3v.6c0 4.1-.7 7.5-2.9 9.9-4.1 4.4-11.4 4.6-11.7 4.6h-32.3c-.1 0-7.5-.1-11.7-4.5-2.2-2.3-3.2-5.5-2.9-9.6v-.4c0-10-8.1-18.1-18.1-18.1s-18.1 8.1-18.1 18.1 8.1 18.1 18.1 18.1h.3c1.6 0 12.9-.2 14.3 14.6.1 9.9 8.2 18 18.1 18h32.5c10 0 18.1-8.1 18.1-18.1v-1.3c2-13.3 13-13.2 14.2-13.1h.2c10 0 18.1-8.1 18.1-18.1s-8.1-18.4-18.1-18.3zM365.7 36c-10.1 0-18.2 8.2-18.2 18.2s8.2 18.2 18.2 18.2S384 64.3 384 54.2 375.8 36 365.7 36zM120.8 68.5h-.2c-1.1.1-8.9.1-12.6-7.7 0 0 0-.1-.1-.1-.1-.2-.2-.5-.3-.7 0-.1-.1-.2-.1-.3-.1-.2-.1-.4-.2-.6-.1-.1-.1-.3-.2-.5s-.1-.3-.1-.5c-.1-.2-.1-.4-.2-.7 0-.1-.1-.2-.1-.4-.1-.3-.1-.6-.2-.9v-.2c-.1-.4-.1-.7-.2-1.1 0-.3-.1-.7-.1-1-.1-7.3-4.4-13.6-10.7-16.4 0 0-2.9-1.4-5.6-1.5-.4 0-1.4-.1-1.6-.1H55.8c-10 0-18.1 8.1-18.1 18-1.4 14.8-13.1 14.7-14.4 14.6h-.2C13.1 68.4 5 76.5 5 86.5v65.2c0 10 8.1 18.1 18.1 18.1h.2c1.7 0 12-.2 14.2 12.8v1.8C36 199.5 25.2 198.7 22.9 199h-.2c-10.7.3-18.1 8.1-18.1 18.1s8.1 18.1 18.1 18.1h1.1c3 .1 12.3 1.6 13.5 14.6.1 8.4 5.8 15.4 13.6 17.4.2 0 .4.1.5.1.3.1.6.1.9.2 1.1.2 2.2.4 3.3.4H88c9.9 0 18.1-8.1 18.1-18 1.4-14.8 13.1-14.7 14.4-14.6h.2c10 0 18.1-8.1 18.1-18.1s-8.1-18.1-18.1-18.1-18.1 8.1-18.1 18.1v.2c.3 4.1-.7 7.4-2.9 9.7-3.4 3.6-8.9 4.4-10.9 4.5H55.5c-.1 0-7.5-.1-11.7-4.5-2.2-2.3-2.9-5.6-2.9-9.7v-2.7c.2-3 1.2-5.5 2.9-7.3 3.4-3.6 8.9-4.8 10.9-5H88c10 0 18.1-7.7 18.1-17.6 1.4-14.8 13.1-14.7 14.4-14.6h.2c10 0 18.1-8.1 18.1-18.1V86.7c.1-10-8-18.2-18-18.2zm-21.1 93.3c-4.2 4.5-11.6 4.5-11.7 4.5H55.8c-.1 0-7.5-.1-11.7-4.5-2.2-2.3-3.2-5.6-2.9-9.7V85c0-3.4 1-6.2 2.9-8.2 3.5-3.7 9.2-4.4 11.1-4.5h33.4c1.7.1 7.6.7 11.2 4.5 1.9 2 2.9 4.8 2.9 8.2V152.1c.2 4.1-.8 7.4-3 9.7zM120.9 39.9c10.1 0 18.2-8.2 18.2-18.2S131 3.4 120.9 3.4s-18.2 8.2-18.2 18.2 8.1 18.3 18.2 18.3z"/><path d="M708.3 104.8c10.1 0 18.2-8.2 18.2-18.2s-8.2-18.2-18.2-18.2-18.2 8.2-18.2 18.2 8.2 18.2 18.2 18.2z"/></svg>

================
File: app/assets/logos/geins.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" viewBox="0 0 726.5 271.2"><path d="M292.6 133.4c-10 0-18.1 8.1-18.1 18.1v.2c.3 4.1-.7 7.4-2.9 9.7-3.4 3.6-8.9 4.4-10.9 4.5h-33.3c-.1 0-7.5-.1-11.7-4.5-2.2-2.3-3.2-5.6-2.9-9.7V86.8c-.3-4.1.7-7.4 2.9-9.7 4.2-4.5 11.6-4.5 11.7-4.5H261.7c5.9.9 11.9 4.6 12.3 13.3v.1c.9 12.6-6.4 15-12 15.3-.9 0-17.4-.1-17.4-.1-10 0-18.1 8.1-18.1 18.1s8.1 18.2 18.1 18.2h15.3c10 0 18.1-8.1 18.1-18.2 0-.4.1-1.5.1-1.8 1.2-12.4 10.9-11.8 14.1-12.3h.2c10 0 18.1-8.1 18.1-18.1S302.4 69 292.4 69h-.2c-2.7 0-13.2-.5-14.2-12.6v-2.2c0-10-8.1-17.8-18.1-17.8h-32.5c-10 0-18.1 8.1-18.1 18-1.6 14.7-13.3 14.6-14.6 14.5h-.2c-10 0-18.1 8.1-18.1 18.1v64.5c0 10 8.1 18.1 18.1 18.1h.2c1.3-.1 13-.2 14.4 14.6.1 8.4 5.8 15.4 13.6 17.4.2 0 .4.1.5.1.3.1.6.1.9.2 1.1.2 2.1.4 3.3.4h32.5c10 0 18.1-8.1 18.1-18 1.4-14.8 13.1-14.7 14.4-14.6h.2c10 0 18.1-8.1 18.1-18.1s-8.1-18.2-18.1-18.2zM536.9 68.5h-.2c-1.3.1-13 .2-14.4-14.6-.1-7.3-4.5-13.6-10.7-16.4 0 0-2.7-1.6-7.2-1.6H472c-10 0-18.1 8.1-18.1 18-1.4 14.8-13.1 14.7-14.4 14.6h-.2c-10 0-18.1 8.1-18.1 18.1v97.2c0 10 8.1 18.1 18.1 18.1s18.1-8.1 18.1-18.1V86.5c-.3-4.1.7-7.4 2.9-9.7 4.2-4.5 11.6-4.5 11.7-4.5h32.2c.1 0 7.5.1 11.7 4.5 2.2 2.3 3.2 5.6 2.9 9.7v65c0 .1-.1 7.5-4.5 11.7-2.3 2.2-5.6 3.2-9.7 2.9h-.2c-10 0-18.1 8.1-18.1 18.1s8.1 18.1 18.1 18.1 18.1-8.1 18.1-18.1v-.2c-.1-1.3-.2-13 14.6-14.4 9.9-.1 18-8.2 18-18.1V86.7c0-10-8.2-18.2-18.2-18.2zM365.7 82.1c-10 0-18.1 8.1-18.1 18.1v84c0 10 8.1 18.1 18.1 18.1s18.1-8.1 18.1-18.1v-84c.1-10-8.1-18.1-18.1-18.1zM708.4 133.8h-.2c-.5 0-13 .6-14.4-14.7v-.2c-.3-9.7-8.4-17.6-18.1-17.6h-32.6c-.8 0-7.6-.3-11.6-4.5-2.2-2.3-2.9-5.6-2.9-9.7v-.4c0-4.1.7-7.4 2.9-9.7 4.2-4.5 11.6-4.5 11.7-4.5h32.3c10 0 18.2-8.1 18.2-18.2V54h.1c-.2-9.8-8.2-17.8-18.1-17.8h-32.5c-10 0-18.1 8.1-18.1 18-1.4 14.8-13.1 14.7-14.4 14.6h-.2c-10 0-18.1 8.1-18.1 18.1s8.1 18.1 18.1 18.1h.2c.5 0 12.9-.6 14.4 14.6.1 9.9 8.2 18 18.1 18h32.5c.5 0 7.5.1 11.7 4.5 2.2 2.3 2.9 5 2.9 9.3v.6c0 4.1-.7 7.5-2.9 9.9-4.1 4.4-11.4 4.6-11.7 4.6h-32.3c-.1 0-7.5-.1-11.7-4.5-2.2-2.3-3.2-5.5-2.9-9.6v-.4c0-10-8.1-18.1-18.1-18.1s-18.1 8.1-18.1 18.1 8.1 18.1 18.1 18.1h.3c1.6 0 12.9-.2 14.3 14.6.1 9.9 8.2 18 18.1 18h32.5c10 0 18.1-8.1 18.1-18.1v-1.3c2-13.3 13-13.2 14.2-13.1h.2c10 0 18.1-8.1 18.1-18.1s-8.1-18.4-18.1-18.3zM365.7 36c-10.1 0-18.2 8.2-18.2 18.2s8.2 18.2 18.2 18.2S384 64.3 384 54.2 375.8 36 365.7 36zM120.8 68.5h-.2c-1.1.1-8.9.1-12.6-7.7 0 0 0-.1-.1-.1-.1-.2-.2-.5-.3-.7 0-.1-.1-.2-.1-.3-.1-.2-.1-.4-.2-.6-.1-.1-.1-.3-.2-.5s-.1-.3-.1-.5c-.1-.2-.1-.4-.2-.7 0-.1-.1-.2-.1-.4-.1-.3-.1-.6-.2-.9v-.2c-.1-.4-.1-.7-.2-1.1 0-.3-.1-.7-.1-1-.1-7.3-4.4-13.6-10.7-16.4 0 0-2.9-1.4-5.6-1.5-.4 0-1.4-.1-1.6-.1H55.8c-10 0-18.1 8.1-18.1 18-1.4 14.8-13.1 14.7-14.4 14.6h-.2C13.1 68.4 5 76.5 5 86.5v65.2c0 10 8.1 18.1 18.1 18.1h.2c1.7 0 12-.2 14.2 12.8v1.8C36 199.5 25.2 198.7 22.9 199h-.2c-10.7.3-18.1 8.1-18.1 18.1s8.1 18.1 18.1 18.1h1.1c3 .1 12.3 1.6 13.5 14.6.1 8.4 5.8 15.4 13.6 17.4.2 0 .4.1.5.1.3.1.6.1.9.2 1.1.2 2.2.4 3.3.4H88c9.9 0 18.1-8.1 18.1-18 1.4-14.8 13.1-14.7 14.4-14.6h.2c10 0 18.1-8.1 18.1-18.1s-8.1-18.1-18.1-18.1-18.1 8.1-18.1 18.1v.2c.3 4.1-.7 7.4-2.9 9.7-3.4 3.6-8.9 4.4-10.9 4.5H55.5c-.1 0-7.5-.1-11.7-4.5-2.2-2.3-2.9-5.6-2.9-9.7v-2.7c.2-3 1.2-5.5 2.9-7.3 3.4-3.6 8.9-4.8 10.9-5H88c10 0 18.1-7.7 18.1-17.6 1.4-14.8 13.1-14.7 14.4-14.6h.2c10 0 18.1-8.1 18.1-18.1V86.7c.1-10-8-18.2-18-18.2zm-21.1 93.3c-4.2 4.5-11.6 4.5-11.7 4.5H55.8c-.1 0-7.5-.1-11.7-4.5-2.2-2.3-3.2-5.6-2.9-9.7V85c0-3.4 1-6.2 2.9-8.2 3.5-3.7 9.2-4.4 11.1-4.5h33.4c1.7.1 7.6.7 11.2 4.5 1.9 2 2.9 4.8 2.9 8.2V152.1c.2 4.1-.8 7.4-3 9.7zM120.9 39.9c10.1 0 18.2-8.2 18.2-18.2S131 3.4 120.9 3.4s-18.2 8.2-18.2 18.2 8.1 18.3 18.2 18.3z"/><path d="M708.3 104.8c10.1 0 18.2-8.2 18.2-18.2s-8.2-18.2-18.2-18.2-18.2 8.2-18.2 18.2 8.2 18.2 18.2 18.2z"/></svg>

================
File: app/components/ui/alert/Alert.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { type AlertVariants, alertVariants } from '.'

const props = defineProps<{
  class?: HTMLAttributes['class']
  variant?: AlertVariants['variant']
}>()
</script>

<template>
  <div :class="cn(alertVariants({ variant }), props.class)" role="alert">
    <slot />
  </div>
</template>

================
File: app/components/ui/alert/AlertDescription.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue';
import { cn } from '@/lib/utils';

const props = defineProps<{
  class?: HTMLAttributes['class'];
}>();
</script>

<template>
  <div :class="cn('text-xs [&_p]:leading-relaxed', props.class)">
    <slot />
  </div>
</template>

================
File: app/components/ui/alert/AlertTitle.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue';
import { cn } from '@/lib/utils';

const props = defineProps<{
  class?: HTMLAttributes['class'];
}>();
</script>

<template>
  <h5 :class="cn('mb-1 text-sm font-semibold leading-none tracking-tight', props.class)">
    <slot />
  </h5>
</template>

================
File: app/components/ui/alert/index.ts
================
import { cva, type VariantProps } from 'class-variance-authority';

export { default as Alert } from './Alert.vue';
export { default as AlertDescription } from './AlertDescription.vue';
export { default as AlertTitle } from './AlertTitle.vue';

export const alertVariants = cva(
  'relative w-full rounded-lg border-l-4 p-4 shadow-md [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-3 [&>svg]:top-1/2 [&>svg]:-translate-y-1/2 [&>svg]:text-foreground [&>svg~*]:pl-7',
  {
    variants: {
      variant: {
        default: 'bg-background text-foreground',
        error: 'border-l-error bg-error/5 dark:border-error [&>svg]:text-error',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
);

export type AlertVariants = VariantProps<typeof alertVariants>;

================
File: app/components/ui/avatar/Avatar.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'
import { AvatarRoot } from 'reka-ui'
import { avatarVariant, type AvatarVariants } from '.'

const props = withDefaults(defineProps<{
  class?: HTMLAttributes['class']
  size?: AvatarVariants['size']
  shape?: AvatarVariants['shape']
}>(), {
  size: 'sm',
  shape: 'circle',
})
</script>

<template>
  <AvatarRoot :class="cn(avatarVariant({ size, shape }), props.class)">
    <slot />
  </AvatarRoot>
</template>

================
File: app/components/ui/avatar/AvatarFallback.vue
================
<script setup lang="ts">
import { AvatarFallback, type AvatarFallbackProps } from 'reka-ui'

const props = defineProps<AvatarFallbackProps>()
</script>

<template>
  <AvatarFallback v-bind="props">
    <slot />
  </AvatarFallback>
</template>

================
File: app/components/ui/avatar/AvatarImage.vue
================
<script setup lang="ts">
import { AvatarImage, type AvatarImageProps } from 'reka-ui'

const props = defineProps<AvatarImageProps>()
</script>

<template>
  <AvatarImage v-bind="props" class="h-full w-full object-cover" />
</template>

================
File: app/components/ui/avatar/index.ts
================
import { cva, type VariantProps } from 'class-variance-authority'

export { default as Avatar } from './Avatar.vue'
export { default as AvatarFallback } from './AvatarFallback.vue'
export { default as AvatarImage } from './AvatarImage.vue'

export const avatarVariant = cva(
  'inline-flex items-center justify-center font-normal text-foreground select-none shrink-0 bg-secondary overflow-hidden',
  {
    variants: {
      size: {
        sm: 'h-10 w-10 text-xs',
        base: 'h-16 w-16 text-2xl',
        lg: 'h-32 w-32 text-5xl',
      },
      shape: {
        circle: 'rounded-full',
        square: 'rounded-md',
      },
    },
  },
)

export type AvatarVariants = VariantProps<typeof avatarVariant>

================
File: app/components/ui/button/Button.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue';
import { cn } from '@/lib/utils';
import { Primitive, type PrimitiveProps } from 'reka-ui';
import { type ButtonVariants, buttonVariants } from '.';

interface Props extends PrimitiveProps {
  variant?: ButtonVariants['variant'];
  size?: ButtonVariants['size'];
  class?: HTMLAttributes['class'];
  loading?: boolean;
}

const props = withDefaults(defineProps<Props>(), {
  as: 'button',
});
</script>

<template>
  <Primitive :as="as" :as-child="asChild" :class="cn(buttonVariants({ variant, size }), props.class)">
    <LucideLoaderCircle v-if="loading" class="mr-2 size-4 animate-spin" />
    <slot />
  </Primitive>
</template>

================
File: app/components/ui/button/index.ts
================
import type { VariantProps } from 'class-variance-authority';
import { cva } from 'class-variance-authority';

export { default as Button } from './Button.vue';

export const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-20 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-accent text-accent-foreground hover:bg-accent/90',
        error: 'bg-error text-error-foreground hover:bg-error/90',
        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 px-3',
        lg: 'h-11 px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
);

export type ButtonVariants = VariantProps<typeof buttonVariants>;

================
File: app/components/ui/card/Card.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue';
import { cn } from '@/lib/utils';

const props = defineProps<{
  class?: HTMLAttributes['class'];
}>();
</script>

<template>
  <div :class="cn('rounded-lg bg-card text-card-foreground shadow-md', props.class)">
    <slot />
  </div>
</template>

================
File: app/components/ui/card/CardContent.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue';
import { cn } from '@/lib/utils';

const props = defineProps<{
  class?: HTMLAttributes['class'];
}>();
</script>

<template>
  <div :class="cn('p-5 xl:p-8', props.class)">
    <slot />
  </div>
</template>

================
File: app/components/ui/card/CardDescription.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <p :class="cn('text-sm text-muted-foreground', props.class)">
    <slot />
  </p>
</template>

================
File: app/components/ui/card/CardFooter.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div :class="cn('flex items-center p-6 pt-0', props.class)">
    <slot />
  </div>
</template>

================
File: app/components/ui/card/CardHeader.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <div :class="cn('flex flex-col gap-y-1.5 p-6', props.class)">
    <slot />
  </div>
</template>

================
File: app/components/ui/card/CardTitle.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

const props = defineProps<{
  class?: HTMLAttributes['class']
}>()
</script>

<template>
  <h3
    :class="
      cn('text-2xl font-semibold leading-none tracking-tight', props.class)
    "
  >
    <slot />
  </h3>
</template>

================
File: app/components/ui/card/index.ts
================
export { default as Card } from './Card.vue'
export { default as CardContent } from './CardContent.vue'
export { default as CardDescription } from './CardDescription.vue'
export { default as CardFooter } from './CardFooter.vue'
export { default as CardHeader } from './CardHeader.vue'
export { default as CardTitle } from './CardTitle.vue'

================
File: app/components/ui/checkbox/Checkbox.vue
================
<script setup lang="ts">
import type { CheckboxRootEmits, CheckboxRootProps } from 'reka-ui';
import { cn } from '@/lib/utils';
import { Check } from 'lucide-vue-next';
import { CheckboxIndicator, CheckboxRoot, useForwardPropsEmits } from 'reka-ui';
import { computed, type HTMLAttributes } from 'vue';

const props = defineProps<CheckboxRootProps & { class?: HTMLAttributes['class'] }>();
const emits = defineEmits<CheckboxRootEmits>();

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props;

  return delegated;
});

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <CheckboxRoot
    v-bind="forwarded"
    :class="
      cn(
        'peer size-5 shrink-0 rounded-sm shadow-sm border border-border ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-accent data-[state=checked]:border-accent data-[state=checked]:text-accent-foreground',
        props.class,
      )
    "
  >
    <CheckboxIndicator class="flex h-full w-full items-center justify-center text-current">
      <slot>
        <Check class="size-4" />
      </slot>
    </CheckboxIndicator>
  </CheckboxRoot>
</template>

================
File: app/components/ui/checkbox/index.ts
================
export { default as Checkbox } from './Checkbox.vue'

================
File: app/components/ui/form/FormControl.vue
================
<script lang="ts" setup>
import { Slot } from 'reka-ui'
import { useFormField } from './useFormField'

const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
</script>

<template>
  <Slot
    :id="formItemId"
    :aria-describedby="!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`"
    :aria-invalid="!!error"
  >
    <slot />
  </Slot>
</template>

================
File: app/components/ui/form/FormDescription.vue
================
<script lang="ts" setup>
import type { HTMLAttributes } from 'vue';
import { cn } from '@/lib/utils';
import { useFormField } from './useFormField';

const props = defineProps<{
  class?: HTMLAttributes['class'];
}>();

const { formDescriptionId } = useFormField();
</script>

<template>
  <p :id="formDescriptionId" :class="cn('pl-1 text-[0.7rem] text-card-foreground/80', props.class)">
    <slot />
  </p>
</template>

================
File: app/components/ui/form/FormItem.vue
================
<script lang="ts" setup>
import { cn } from '@/lib/utils';
import { useId } from 'reka-ui';
import { type HTMLAttributes, provide } from 'vue';
import { FORM_ITEM_INJECTION_KEY } from './injectionKeys';

const props = defineProps<{
  class?: HTMLAttributes['class'];
}>();

const id = useId();
provide(FORM_ITEM_INJECTION_KEY, id);
</script>

<template>
  <div :class="cn('space-y-0.5 mb-2', props.class)">
    <slot />
  </div>
</template>

================
File: app/components/ui/form/FormLabel.vue
================
<script lang="ts" setup>
import type { LabelProps } from 'reka-ui';
import type { HTMLAttributes } from 'vue';
import { cn } from '@/lib/utils';
import { Label } from '@/components/ui/label';
import { useFormField } from './useFormField';

const props = defineProps<LabelProps & { class?: HTMLAttributes['class'] }>();

const { error, formItemId } = useFormField();
</script>

<template>
  <Label :class="cn('font-normal text-xs', error && 'text-error', props.class)" :for="formItemId">
    <slot />
  </Label>
</template>

================
File: app/components/ui/form/FormMessage.vue
================
<script lang="ts" setup>
import { ErrorMessage } from 'vee-validate';
import { toValue } from 'vue';
import { useFormField } from './useFormField';

const { name, formMessageId } = useFormField();
</script>

<template>
  <ErrorMessage
    :id="formMessageId"
    as="p"
    :name="toValue(name)"
    class="pl-1 pt-0.5 text-xs font-medium text-error"
  />
</template>

================
File: app/components/ui/form/index.ts
================
export { default as FormControl } from './FormControl.vue'
export { default as FormDescription } from './FormDescription.vue'
export { default as FormItem } from './FormItem.vue'
export { default as FormLabel } from './FormLabel.vue'
export { default as FormMessage } from './FormMessage.vue'
export { FORM_ITEM_INJECTION_KEY } from './injectionKeys'
export { Form, Field as FormField } from 'vee-validate'

================
File: app/components/ui/form/injectionKeys.ts
================
import type { InjectionKey } from 'vue'

export const FORM_ITEM_INJECTION_KEY
  = Symbol() as InjectionKey<string>

================
File: app/components/ui/form/useFormField.ts
================
import {
  FieldContextKey,
  useFieldError,
  useIsFieldDirty,
  useIsFieldTouched,
  useIsFieldValid,
} from 'vee-validate';
import { inject } from 'vue';
import { FORM_ITEM_INJECTION_KEY } from './injectionKeys';

export function useFormField() {
  const fieldContext = inject(FieldContextKey);
  const fieldItemContext = inject(FORM_ITEM_INJECTION_KEY);

  if (!fieldContext) throw new Error('useFormField should be used within <FormField>');

  const { name } = fieldContext;
  const id = fieldItemContext;

  const fieldState = {
    valid: useIsFieldValid(name),
    isDirty: useIsFieldDirty(name),
    isTouched: useIsFieldTouched(name),
    error: useFieldError(name),
  };

  return {
    id,
    name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
}

================
File: app/components/ui/input/index.ts
================
export { default as Input } from './Input.vue'

================
File: app/components/ui/input/Input.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue';
import { cn } from '@/lib/utils';
import { useVModel } from '@vueuse/core';

const props = defineProps<{
  defaultValue?: string | number;
  modelValue?: string | number;
  class?: HTMLAttributes['class'];
}>();

const emits = defineEmits<{
  (e: 'update:modelValue', payload: string | number): void;
}>();

const modelValue = useVModel(props, 'modelValue', emits, {
  passive: true,
  defaultValue: props.defaultValue,
});
</script>

<template>
  <input
    v-model="modelValue"
    :class="
      cn(
        'flex h-10 w-full shadow-sm border border-border text-card-foreground rounded-lg px-2 py-1 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-foreground/70 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-accent focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 aria-[invalid=true]:border-error',
        props.class,
      )
    "
  />
</template>

================
File: app/components/ui/label/index.ts
================
export { default as Label } from './Label.vue'

================
File: app/components/ui/label/Label.vue
================
<script setup lang="ts">
import { cn } from '@/lib/utils';
import { Label, type LabelProps } from 'reka-ui';
import { computed, type HTMLAttributes } from 'vue';

const props = defineProps<LabelProps & { class?: HTMLAttributes['class'] }>();

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props;

  return delegated;
});
</script>

<template>
  <Label
    v-bind="delegatedProps"
    :class="
      cn(
        'font-normal text-xs leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
        props.class,
      )
    "
  >
    <slot />
  </Label>
</template>

================
File: app/components/ui/skeleton/index.ts
================
export { default as Skeleton } from './Skeleton.vue'

================
File: app/components/ui/skeleton/Skeleton.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue'
import { cn } from '@/lib/utils'

interface SkeletonProps {
  class?: HTMLAttributes['class']
}

const props = defineProps<SkeletonProps>()
</script>

<template>
  <div :class="cn('animate-pulse rounded-md bg-muted', props.class)" />
</template>

================
File: app/components/ui/switch/index.ts
================
export { default as Switch } from './Switch.vue'

================
File: app/components/ui/switch/Switch.vue
================
<script setup lang="ts">
import { cn } from '@/utils';
import {
  SwitchRoot,
  type SwitchRootEmits,
  type SwitchRootProps,
  SwitchThumb,
  useForwardPropsEmits,
} from 'radix-vue';
import { computed, type HTMLAttributes } from 'vue';

const props = defineProps<SwitchRootProps & { class?: HTMLAttributes['class'] }>();

const emits = defineEmits<SwitchRootEmits>();

const delegatedProps = computed(() => {
  const { class: _, ...delegated } = props;

  return delegated;
});

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <SwitchRoot
    v-bind="forwarded"
    :class="
      cn(
        'peer inline-flex h-6 w-10 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-accent data-[state=unchecked]:bg-card-foreground/20',
        props.class,
      )
    "
  >
    <SwitchThumb
      :class="
        cn(
          'pointer-events-none block h-5 w-5 rounded-full bg-card shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0',
        )
      "
    >
      <slot name="thumb" />
    </SwitchThumb>
  </SwitchRoot>
</template>

================
File: app/components/ui/textarea/index.ts
================
export { default as Textarea } from './Textarea.vue'

================
File: app/components/ui/textarea/Textarea.vue
================
<script setup lang="ts">
import type { HTMLAttributes } from 'vue';
import { cn } from '@/lib/utils';
import { useVModel } from '@vueuse/core';

const props = defineProps<{
  class?: HTMLAttributes['class'];
  defaultValue?: string | number;
  modelValue?: string | number;
}>();

const emits = defineEmits<{
  (e: 'update:modelValue', payload: string | number): void;
}>();

const modelValue = useVModel(props, 'modelValue', emits, {
  passive: true,
  defaultValue: props.defaultValue,
});
</script>

<template>
  <textarea
    v-model="modelValue"
    :class="
      cn(
        'flex min-h-20 w-full shadow-sm border border-border text-card-foreground rounded-lg p-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
        props.class,
      )
    "
  />
</template>

================
File: app/components/BottomUrls.vue
================
<script setup lang="ts">
import type { CheckoutRedirectsType } from '@geins/types';
const _props = defineProps<{
  urls: CheckoutRedirectsType;
}>();
</script>
<template>
  <div
    v-if="urls?.terms || urls?.privacy"
    class="flex w-full justify-center gap-4 text-xs lg:absolute lg:bottom-10 lg:left-[4vw] lg:w-auto lg:justify-start"
  >
    <a v-if="urls?.terms" :href="urls.terms" class="text-foreground/90 underline underline-offset-2">
      {{ $t('terms_and_conditions') }}
    </a>
    <a v-if="urls?.privacy" :href="urls.privacy" class="text-foreground/90 underline underline-offset-2">
      {{ $t('privacy_policy') }}
    </a>
  </div>
</template>

================
File: app/components/Cart.vue
================
<script setup lang="ts">
import type { CartItemType, CartType } from '@geins/types';
const { vatIncluded, getRegularPrice, getSellingPrice } = usePrice();
const { getProductImageUrl } = useCheckoutToken();
const { cartEmpty } = useCheckout();

const props = defineProps<{
  cart: CartType;
}>();

const items = ref<CartItemType[]>(props.cart.items);
const firstItem = computed(() => items.value[0]);

const getImgUrl = (item?: CartItemType): string | undefined => {
  if (!item?.product?.productImages?.length) return '';
  const fileName = item?.product?.productImages?.[0]?.fileName;
  return getProductImageUrl(fileName) || undefined;
};

const getSkuName = (item: CartItemType): string => {
  const skuId = item?.skuId;
  const sku = item.product?.skus?.find((skuItem) => skuItem.skuId === skuId);
  const name = !sku?.name || sku?.name === '-' ? 'ONE SIZE' : sku.name;
  return name;
};
</script>
<template>
  <Card class="mx-auto w-full max-w-3xl">
    <CardContent v-if="!cartEmpty">
      <!-- Single Item Cart -->
      <div v-if="items?.length === 1 && firstItem">
        <div class="flex flex-col">
          <!-- Product Details -->
          <div class="flex justify-between">
            <div class="pr-2">
              <p class="md:text-md text-sm font-bold uppercase text-card-foreground/80">
                {{ firstItem.product?.brand?.name }}
              </p>
              <h3 class="text-2xl font-thin lg:mb-2 lg:text-[3.1vh] lg:leading-[3.1vh]">
                {{ firstItem.title }}
              </h3>
            </div>
            <div class="flex flex-col justify-end">
              <div
                class="mb-auto self-end rounded-lg bg-background px-2 py-0.5 text-[0.7rem] text-foreground md:text-xs"
              >
                {{ getSkuName(firstItem) }}
              </div>
              <div
                :class="
                  cn(
                    'mb-0.5 flex items-center justify-end text-xs text-card-foreground/65',
                    `${!firstItem.unitPrice?.isDiscounted ? 'lg:mb-2' : ''}`,
                  )
                "
              >
                <span class="text-sm">{{ firstItem.quantity }}</span>
                <span class="mx-2">×</span>
                <span v-if="firstItem?.unitPrice" class="flex flex-col text-sm">
                  <span :class="`${firstItem.unitPrice?.isDiscounted ? 'text-sale' : ''}`">
                    {{ getSellingPrice(firstItem.unitPrice) }}
                  </span>
                  <span
                    v-if="firstItem.unitPrice?.isDiscounted"
                    class="ml-2 text-[0.7rem] leading-[0.8rem] line-through"
                  >
                    {{ getRegularPrice(firstItem.unitPrice) }}
                  </span>
                </span>
              </div>
            </div>
          </div>
          <div
            v-if="firstItem.totalPrice"
            class="mt-[1vh] text-3xl text-card-foreground lg:text-[3.5vh] lg:leading-[3.5vh]"
            :class="{ 'text-sale': firstItem.totalPrice?.isDiscounted }"
          >
            {{ getSellingPrice(firstItem.totalPrice) }}
            <span v-if="!vatIncluded" class="text-sm text-card-foreground/80">
              {{ $t('ex_vat') }}
            </span>
          </div>
          <!-- Product Image -->
          <div class="relative mb-[1vh] mt-[3vh] h-[45vh] w-full">
            <NuxtImg
              v-if="getImgUrl(firstItem)"
              :src="getImgUrl(firstItem)"
              :alt="firstItem.title"
              class="mx-auto h-full rounded-lg object-contain"
              sizes="80vw lg:40vw"
              densities="x1 x2"
            />
          </div>
        </div>
      </div>

      <!-- Multiple Items Cart -->
      <div v-else class="lg:py-4">
        <div class="lg:px-5">
          <div v-for="item in items" :key="item.id" class="flex border-b py-4 last:border-b-0">
            <!-- Product Image -->
            <div class="relative mr-4 h-24 shrink-0">
              <NuxtImg
                height="96px"
                :src="getImgUrl(item)"
                :alt="item.title"
                class="h-full rounded-lg object-contain shadow-md"
                densities="x1 x2"
              />
            </div>

            <!-- Product Details -->
            <div class="flex w-full flex-col pt-1">
              <div class="mb-2 lg:mb-1">
                <p class="text-[0.65rem] font-bold uppercase text-card-foreground/80 lg:text-xs">
                  {{ item.product?.brand?.name }}
                </p>
                <h3 class="mb-0.5 text-lg font-thin leading-5 lg:mb-1 lg:text-xl">{{ item.title }}</h3>
                <div
                  class="inline-block rounded-lg bg-background px-2 py-0.5 text-[0.7rem] text-foreground md:text-xs"
                >
                  {{ getSkuName(item) }}
                </div>
              </div>
              <div class="w-full items-center justify-between lg:flex">
                <div class="flex items-center text-xs text-card-foreground/65">
                  <span class="text-xs lg:text-sm">{{ item.quantity }}</span>
                  <span class="mx-1 lg:mx-3">×</span>
                  <span
                    v-if="item.unitPrice"
                    class="flex text-xs lg:flex-col lg:text-sm xl:flex-row xl:items-center"
                  >
                    <span :class="{ 'text-sale': item.unitPrice?.isDiscounted }">
                      {{ getSellingPrice(item.unitPrice) }}
                    </span>
                    <span
                      v-if="item.unitPrice?.isDiscounted"
                      class="ml-2 text-[0.7rem] line-through lg:leading-[0.8rem]"
                    >
                      {{ getRegularPrice(item.unitPrice) }}
                    </span>
                  </span>
                </div>
                <div
                  v-if="item.totalPrice"
                  class="text-lg lg:text-xl"
                  :class="{ 'text-sale': item.totalPrice?.isDiscounted }"
                >
                  {{ getSellingPrice(item.totalPrice) }}
                  <span v-if="!vatIncluded" class="text-[0.65rem] text-card-foreground/80">
                    {{ $t('ex_vat') }}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </CardContent>
    <CardContent v-else>
      <div class="flex h-[20vh] items-center justify-center">
        <div class="text-center">
          <p class="text-2xl font-bold text-card-foreground">{{ $t('cart_empty') }}</p>
          <p class="mt-2 text-sm text-card-foreground/60">{{ $t('cart_empty_desc') }}</p>
        </div>
      </div>
    </CardContent>
  </Card>
</template>

================
File: app/components/CartSummary.vue
================
<script setup lang="ts">
import type { CartSummaryType } from '@geins/types';
const props = defineProps<{
  summary: CartSummaryType;
  simple?: boolean;
  display?: boolean;
}>();

const { vatIncluded, getRegularPrice, getSellingPrice } = usePrice();
const freeShipping = computed(() => props.summary.shipping.feeIncVat === 0);
const showDetails = ref(false);
</script>
<template>
  <div v-auto-animate>
    <div class="flex w-full flex-col items-end py-1 text-xl lg:text-2xl">
      <div class="flex w-full items-end justify-between font-bold">
        <span>{{ $t('cart_summary_total') }}</span>
        <span
          class="mb-1 ml-2 mr-auto text-[0.7rem] font-normal leading-[0.8rem] text-card-foreground/80 lg:text-xs"
          >{{ $t('cart_summary_inc_vat_and_shipping') }}</span
        >
        <span>{{ summary.total.sellingPriceIncVatFormatted }}</span>
      </div>
      <button class="text-xs text-card-foreground/80 underline" @click="showDetails = !showDetails">
        {{ showDetails ? $t('hide_details') : $t('show_details') }}
      </button>
    </div>
    <div v-if="showDetails" class="mt-2 w-full space-y-0.5 rounded-lg border bg-background/10 p-4 text-sm">
      <div v-if="summary.total.isDiscounted && !simple" class="flex justify-between py-1">
        <span class="font-semibold">{{ $t('cart_summary_regular_price') }}</span>
        <span>{{ getRegularPrice(summary.subTotal) }}</span>
      </div>
      <div v-if="summary.total.isDiscounted && !simple" class="flex justify-between py-1 text-sale">
        <span class="font-semibold">{{ $t('cart_summary_discount') }}</span>
        <span
          >-{{
            vatIncluded ? summary.total.discountIncVatFormatted : summary.total.discountExVatFormatted
          }}</span
        >
      </div>
      <div class="flex justify-between py-1">
        <span class="font-semibold">{{ $t('cart_summary_subtotal') }}</span>
        <span>{{ getSellingPrice(summary.subTotal) }}</span>
      </div>
      <div class="flex justify-between py-1">
        <span class="font-semibold">
          {{
            summary.shipping.isDefault && summary.shipping.amountLeftToFreeShipping !== 0
              ? $t('cart_summary_estimated_shipping_fee')
              : $t('cart_summary_shipping_fee')
          }}
        </span>
        <span :class="{ 'font-bold': freeShipping }">
          {{
            freeShipping
              ? $t('free_shipping')
              : vatIncluded
                ? summary.shipping.feeIncVatFormatted
                : summary.shipping.feeExVatFormatted
          }}
        </span>
      </div>
      <div
        v-if="!freeShipping && !display && summary.shipping.amountLeftToFreeShipping !== -1"
        class="text-right text-xs"
      >
        <span class="font-bold">{{ summary.shipping.amountLeftToFreeShippingFormatted }}</span>
        {{ $t('cart_summary_left_to_free_shipping') }}
      </div>
      <div v-if="!vatIncluded" class="flex justify-between py-1">
        <span class="font-semibold">{{ $t('cart_summary_vat') }}</span>
        <span>{{ summary.total.vatFormatted }}</span>
      </div>
      <div v-if="summary.balance.pending > 0" class="py-1">
        <div class="flex justify-between font-bold">
          <span>{{ $t('cart_summary_total_ex_balance') }}</span>
          <span>{{ summary.balance.totalSellingPriceExBalanceIncVatFormatted }}</span>
        </div>
        <div class="flex justify-between py-1">
          <span class="font-semibold">{{ $t('cart_summary_balance') }}</span>
          <span>-{{ summary.balance.pendingFormatted }}</span>
        </div>
      </div>
      <div class="flex justify-between py-1 text-lg font-bold">
        <span>{{ $t('cart_summary_total') }}</span>
        <span>{{ summary.total.sellingPriceIncVatFormatted }}</span>
      </div>
    </div>
  </div>
</template>

================
File: app/components/CheckoutForm.vue
================
<script setup lang="ts">
import type { CheckoutFormType } from '#shared/types';
import { useDebounceFn } from '@vueuse/core';
import { useForm } from 'vee-validate';
import { toTypedSchema } from '@vee-validate/zod';
import * as z from 'zod';
const { vatIncluded } = usePrice();
const { t } = useI18n();

const props = defineProps<{
  data: CheckoutFormType;
  onlyAddress?: boolean;
  hideMessageInput?: boolean;
}>();

const emailSchema = props.onlyAddress ? z.string().optional() : z.string().email(t('form_validation_email'));
const phoneSchema = props.onlyAddress
  ? z.string().optional()
  : z.string().min(1, t('form_validation_phone_required'));
const identityNumberSchema =
  !vatIncluded.value && !props.onlyAddress
    ? z.string().min(1, t('form_validation_identity_number_required'))
    : z.string().optional();

const companyNameSchema = !vatIncluded.value
  ? z.string().min(1, t('form_validation_company_required'))
  : z.string().optional();

const formSchema = toTypedSchema(
  z.object({
    email: emailSchema,
    identityNumber: identityNumberSchema,
    address: z.object({
      phone: phoneSchema,
      company: companyNameSchema,
      firstName: z.string().min(1, t('form_validation_first_name_required')),
      lastName: z.string().min(1, t('form_validation_last_name_required')),
      careOf: z.string().optional(),
      addressLine1: z.string().min(1, t('form_validation_street_address_required')),
      zip: z.string().min(1, t('form_validation_zip_required')),
      city: z.string().min(1, t('form_validation_city_required')),
      country: z.string().optional(),
    }),
    message: z.string().optional(),
  }),
);

const form = useForm({
  validationSchema: formSchema,
  initialValues: {
    address: {
      country: props.data.address?.country || '',
    },
  },
});

const formValid = computed(() => form.meta.value.valid);
const formTouched = computed(() => form.meta.value.touched);

const emit = defineEmits<{
  update: [data: CheckoutFormUpdateEvent];
}>();

watch(
  form.values,
  useDebounceFn(async () => {
    emit('update', {
      valid: formValid.value,
      touched: formTouched.value,
      values: form.values as CheckoutFormType,
    });
  }),
);

const onSubmit = form.handleSubmit((values) => {
  console.log('Form submitted!', values);
});
</script>

<template>
  <form class="space-y-2" @submit.prevent="onSubmit">
    <div v-if="!onlyAddress" class="grid grid-cols-1 md:grid-cols-2 md:gap-4">
      <FormField
        v-slot="{ componentField }"
        name="email"
        :validate-on-change="false"
        :validate-on-input="false"
        :validate-on-model-update="false"
      >
        <FormItem v-auto-animate>
          <FormLabel>{{ $t('form_label_email') }}</FormLabel>
          <FormControl>
            <Input v-bind="componentField" type="email" />
          </FormControl>
          <FormMessage />
        </FormItem>
      </FormField>

      <FormField v-slot="{ componentField }" name="address.phone">
        <FormItem v-auto-animate>
          <FormLabel>{{ $t('form_label_phone') }}</FormLabel>
          <FormControl>
            <Input v-bind="componentField" type="tel" />
          </FormControl>
          <FormMessage />
        </FormItem>
      </FormField>
    </div>
    <FormField v-if="!vatIncluded && !onlyAddress" v-slot="{ componentField }" name="identityNumber">
      <FormItem v-auto-animate>
        <FormLabel>{{ $t('form_label_org_nr') }}</FormLabel>
        <FormControl>
          <Input v-bind="componentField" />
        </FormControl>
        <FormMessage />
      </FormItem>
    </FormField>
    <FormField v-if="!vatIncluded" v-slot="{ componentField }" name="address.company">
      <FormItem v-auto-animate>
        <FormLabel>{{ $t('form_label_company') }}</FormLabel>
        <FormControl>
          <Input v-bind="componentField" />
        </FormControl>
        <FormMessage />
      </FormItem>
    </FormField>
    <FormField v-if="onlyAddress" v-slot="{ componentField }" name="address.phone">
      <FormItem v-auto-animate>
        <FormLabel>{{ $t('form_label_phone') }}</FormLabel>
        <FormControl>
          <Input v-bind="componentField" type="tel" />
        </FormControl>
        <FormMessage />
      </FormItem>
    </FormField>
    <div class="grid grid-cols-1 md:grid-cols-2 md:gap-4">
      <FormField v-slot="{ componentField }" name="address.firstName">
        <FormItem v-auto-animate>
          <FormLabel>{{ $t('form_label_first_name') }}</FormLabel>
          <FormControl>
            <Input v-bind="componentField" />
          </FormControl>
          <FormMessage />
        </FormItem>
      </FormField>

      <FormField v-slot="{ componentField }" name="address.lastName">
        <FormItem v-auto-animate>
          <FormLabel>{{ $t('form_label_last_name') }}</FormLabel>
          <FormControl>
            <Input v-bind="componentField" />
          </FormControl>
          <FormMessage />
        </FormItem>
      </FormField>
    </div>

    <FormField v-slot="{ componentField }" name="address.careOf">
      <FormItem v-auto-animate>
        <FormLabel>
          {{ $t('form_label_care_of') }}
          <span class="text-card-foreground/60">({{ $t('form_label_optional') }})</span>
        </FormLabel>
        <FormControl>
          <Input v-bind="componentField" />
        </FormControl>
        <FormMessage />
      </FormItem>
    </FormField>

    <FormField v-slot="{ componentField }" name="address.addressLine1">
      <FormItem v-auto-animate>
        <FormLabel>{{ $t('form_label_street_address') }}</FormLabel>
        <FormControl>
          <Input v-bind="componentField" />
        </FormControl>
        <FormMessage />
      </FormItem>
    </FormField>

    <div class="grid grid-cols-1 md:grid-cols-2 md:gap-4">
      <FormField v-slot="{ componentField }" name="address.zip">
        <FormItem v-auto-animate>
          <FormLabel>{{ $t('form_label_zip') }}</FormLabel>
          <FormControl>
            <Input v-bind="componentField" />
          </FormControl>
          <FormMessage />
        </FormItem>
      </FormField>
      <FormField v-slot="{ componentField }" name="address.city">
        <FormItem v-auto-animate>
          <FormLabel>{{ $t('form_label_city') }}</FormLabel>
          <FormControl>
            <Input v-bind="componentField" />
          </FormControl>
          <FormMessage />
        </FormItem>
      </FormField>
    </div>
    <FormField v-if="!onlyAddress && !hideMessageInput" v-slot="{ componentField }" name="message">
      <FormItem v-auto-animate>
        <FormLabel>
          {{ $t('form_label_message') }}
          <span class="text-card-foreground/60">({{ $t('form_label_optional') }})</span>
        </FormLabel>
        <FormControl>
          <Textarea v-bind="componentField" />
        </FormControl>
        <FormMessage />
      </FormItem>
    </FormField>
  </form>
</template>

================
File: app/components/ContentSwitch.vue
================
<script setup lang="ts">
const _props = defineProps<{
  label?: string;
  description?: string;
  insideBox?: boolean;
}>();

const checked = defineModel<boolean>('checked');
</script>
<template>
  <div v-auto-animate>
    <div v-auto-animate class="rounded-lg border p-4 text-sm shadow-sm">
      <div class="flex flex-row items-center justify-between">
        <div class="space-y-0.5">
          <p>{{ label }}</p>
          <p v-if="description">{{ description }}</p>
        </div>
        <div>
          <Switch v-model:checked="checked" />
        </div>
      </div>
      <div v-if="insideBox && checked" class="pt-4">
        <slot />
      </div>
    </div>
    <div v-if="!insideBox && checked" class="pt-4">
      <slot />
    </div>
  </div>
</template>

================
File: app/components/ExternalSnippet.vue
================
<script setup lang="ts">
import type { ExternalSnippetType } from '#shared/types';
const props = defineProps<{
  type: ExternalSnippetType;
}>();
const { externalSnippetHtml, renderExternalSnippet } = useExternalSnippet();

const id = computed(() => `${props.type}-external`);

onMounted(() => {
  renderExternalSnippet(props.type);
});
</script>

<template>
  <!-- eslint-disable-next-line vue/no-v-html -->
  <div :id="id" v-html="externalSnippetHtml" />
</template>

================
File: app/components/Header.vue
================
<script setup lang="ts">
import { LucideArrowLeft, LucideArrowRight } from '#components';
const { logo, icon, iconFallback, title, urls } = useCheckoutToken();

const _props = defineProps<{
  confirmPage?: boolean;
}>();
</script>
<template>
  <header
    v-if="title || logo || icon || iconFallback || urls?.cancel"
    class="mx-auto flex w-full max-w-3xl items-center"
  >
    <a v-if="urls?.cancel && !confirmPage" :href="urls.cancel" class="flex items-center">
      <LucideArrowLeft class="mr-4 size-6" />
      <span v-if="!title && !logo && !icon && !iconFallback" class="text-md">
        {{ $t('go_back') }}
      </span>
    </a>
    <Avatar
      v-if="icon || (!logo && iconFallback)"
      :class="cn('mr-4 size-12 shrink-0', `${!icon ? 'bg-accent text-accent-foreground' : ''}`)"
    >
      <AvatarImage v-if="icon" :src="icon" :alt="title" />
      <AvatarFallback class="text-xl font-bold tracking-wider">{{ iconFallback }}</AvatarFallback>
    </Avatar>
    <img v-if="logo" :src="logo" :class="cn(`h-logo w-auto pr-6 mr-6`)" />
    <h1 v-if="title && !logo" class="text-xl font-semibold tracking-wide">{{ title }}</h1>
    <Button
      v-if="urls?.continue && confirmPage"
      as-child
      variant="outline"
      class="ml-auto hidden items-center border-foreground/60 hover:border-foreground/20 hover:bg-transparent hover:text-foreground md:flex"
    >
      <a :href="urls.continue">
        {{ $t('continue_shopping') }}
        <LucideArrowRight />
      </a>
    </Button>
  </header>
</template>

================
File: app/components/Loading.vue
================
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24">
    <!-- Icon from SVG Spinners by Utkarsh Verma - https://github.com/n3r4zzurr0/svg-spinners/blob/main/LICENSE -->
    <rect width="10" height="10" x="1" y="1" fill="currentColor" rx="1">
      <animate
        id="svgSpinnersBlocksShuffle30"
        fill="freeze"
        attributeName="x"
        begin="0;svgSpinnersBlocksShuffle3b.end"
        dur="0.2s"
        values="1;13"
      />
      <animate
        id="svgSpinnersBlocksShuffle31"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle38.end"
        dur="0.2s"
        values="1;13"
      />
      <animate
        id="svgSpinnersBlocksShuffle32"
        fill="freeze"
        attributeName="x"
        begin="svgSpinnersBlocksShuffle39.end"
        dur="0.2s"
        values="13;1"
      />
      <animate
        id="svgSpinnersBlocksShuffle33"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle3a.end"
        dur="0.2s"
        values="13;1"
      />
    </rect>
    <rect width="10" height="10" x="1" y="13" fill="currentColor" rx="1">
      <animate
        id="svgSpinnersBlocksShuffle34"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle30.end"
        dur="0.2s"
        values="13;1"
      />
      <animate
        id="svgSpinnersBlocksShuffle35"
        fill="freeze"
        attributeName="x"
        begin="svgSpinnersBlocksShuffle31.end"
        dur="0.2s"
        values="1;13"
      />
      <animate
        id="svgSpinnersBlocksShuffle36"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle32.end"
        dur="0.2s"
        values="1;13"
      />
      <animate
        id="svgSpinnersBlocksShuffle37"
        fill="freeze"
        attributeName="x"
        begin="svgSpinnersBlocksShuffle33.end"
        dur="0.2s"
        values="13;1"
      />
    </rect>
    <rect width="10" height="10" x="13" y="13" fill="currentColor" rx="1">
      <animate
        id="svgSpinnersBlocksShuffle38"
        fill="freeze"
        attributeName="x"
        begin="svgSpinnersBlocksShuffle34.end"
        dur="0.2s"
        values="13;1"
      />
      <animate
        id="svgSpinnersBlocksShuffle39"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle35.end"
        dur="0.2s"
        values="13;1"
      />
      <animate
        id="svgSpinnersBlocksShuffle3a"
        fill="freeze"
        attributeName="x"
        begin="svgSpinnersBlocksShuffle36.end"
        dur="0.2s"
        values="1;13"
      />
      <animate
        id="svgSpinnersBlocksShuffle3b"
        fill="freeze"
        attributeName="y"
        begin="svgSpinnersBlocksShuffle37.end"
        dur="0.2s"
        values="1;13"
      />
    </rect>
  </svg>
</template>

<script>
export default {
  name: 'Loading',
};
</script>

================
File: app/components/ManualCheckout.vue
================
<script setup lang="ts">
import { AlertCircle } from 'lucide-vue-next';
const { state, checkoutLoading, cart, currentCountryName, updateCheckoutData, completeCheckout } =
  useCheckout();
const { t } = useI18n();

const props = defineProps<{
  enableCompleteCheckout: boolean;
  disabled: boolean;
}>();

const emit = defineEmits<{
  completed: [value: boolean];
}>();

const billingFormData = ref<CheckoutFormType>({
  email: '',
  address: state.value.billingAddress,
  message: '',
});

const shippingFormData = ref<CheckoutFormType>({
  address: state.value.shippingAddress,
});

const formValid = ref(false);
const formTouched = ref(false);
const error = ref({
  title: '',
  message: '',
});

const handleFormUpdate = async (data: CheckoutFormUpdateEvent, addressType: 'billing' | 'shipping') => {
  updateCheckoutData(addressType, data.values);
  formTouched.value = data.touched;
  formValid.value = data.valid;
};

const handleCheckout = async () => {
  if (props.disabled) return;

  const response = await completeCheckout();

  if (!response.success) {
    error.value.title = t('error_create_order');
    error.value.message = response.message;
    return;
  }

  if (response.success && response.redirectUrl) {
    navigateTo(response.redirectUrl, { external: true });
  }
};

const handleNextStep = async () => {
  emit('completed', true);
};
</script>
<template>
  <div :class="cn('lg:px-7', `${disabled ? 'pointer-events-none opacity-20' : ''}`)">
    <h2 class="text-lg font-bold">
      {{ state.useShippingAddress ? $t('billing_address') : $t('your_information') }}
    </h2>
    <p class="mb-2 text-card-foreground/60">
      {{ $t('address_must_be_in_country', { country: currentCountryName }) }}
    </p>
    <CheckoutForm :data="billingFormData" @update="handleFormUpdate($event, 'billing')" />
    <!-- Shipping Information -->
    <ContentSwitch
      v-model:checked="state.useShippingAddress"
      :label="$t('ship_to_different_address')"
      :inside-box="true"
      class="mt-4"
    >
      <h2 class="text-lg font-bold">{{ $t('shipping_address') }}</h2>
      <p class="mb-2 text-card-foreground/60">
        {{ $t('address_must_be_in_country', { country: currentCountryName }) }}
      </p>
      <CheckoutForm
        :data="shippingFormData"
        :only-address="true"
        @update="handleFormUpdate($event, 'shipping')"
      />
    </ContentSwitch>
    <CartSummary v-if="cart?.summary" :summary="cart.summary" class="mt-4" />
    <Alert v-if="error.title && error.message" variant="error" class="mt-4">
      <AlertCircle class="size-5" />
      <AlertTitle>{{ error.title }}</AlertTitle>
      <AlertDescription>{{ error.message }}</AlertDescription>
    </Alert>
    <Button
      v-if="enableCompleteCheckout"
      :loading="checkoutLoading"
      class="mt-4 w-full"
      size="lg"
      :disabled="!formTouched || !formValid"
      @click="handleCheckout"
    >
      {{ checkoutLoading ? $t('processing') + '...' : $t('complete_checkout') }}
    </Button>
    <Button
      v-else
      class="mt-4 w-full"
      size="lg"
      :loading="checkoutLoading"
      :disabled="!formTouched || !formValid"
      @click="handleNextStep"
    >
      {{ checkoutLoading ? $t('loading') + '...' : $t('go_to_payment') }}
    </Button>
  </div>
</template>

================
File: app/composables/useCheckout.ts
================
import type { CheckoutInputType, GeinsAddressType } from '@geins/types';
import { CustomerType, PaymentOptionCheckoutType } from '@geins/types';
/**
 * A composable function that provides functionality for managing the checkout process.
 * It includes state management, computed properties, and methods for initializing,
 * updating, and completing the checkout process.
 *
 * @returns {UseCheckoutComposable} An object containing state, computed properties, and methods for checkout management.
 *
 * @property {Ref<CheckoutState>} state - Reactive state object for checkout data.
 * @property {Ref<boolean>} checkoutLoading - Reactive boolean indicating if a checkout operation is in progress.
 * @property {Ref<string>} error - Reactive string for storing error messages.
 * @property {ComputedRef<CheckoutSettings>} checkoutSettings - Computed property for checkout settings.
 * @property {ComputedRef<CartType>} cart - Computed property for the current cart.
 * @property {ComputedRef<boolean>} cartEmpty - Computed property indicating if the cart is empty.
 * @property {ComputedRef<CheckoutRedirectsType>} redirectUrls - Computed property for redirect URLs.
 * @property {ComputedRef<string>} currentCountryName - Computed property for the current country name.
 * @property {ComputedRef<boolean>} isPaymentInvoice - Computed property indicating if the payment method is invoice.
 * @property {ComputedRef<boolean>} useManualCheckout - Computed property indicating if manual checkout is used.
 * @property {() => Promise<void>} initializeCheckout - Method to initialize the checkout process.
 * @property {(type: 'billing' | 'shipping', data: CheckoutFormType) => Promise<void>} updateCheckoutData - Method to update billing or shipping data.
 * @property {() => Promise<void>} updateCheckout - Method to update the checkout process.
 * @property {() => Promise<CompleteCheckoutResponse>} completeCheckout - Method to complete the checkout process.
 * @property {(response: CompleteCheckoutResponse) => string} getRedirectUrl - Method to get the redirect URL based on the checkout response.
 */
export const useCheckout = (): UseCheckoutComposable => {
  const geinsClient = useGeinsClient();
  const { geinsLog, geinsLogWarn, geinsLogError } = useGeinsLog('useCheckout.ts');
  const { vatIncluded } = usePrice();
  const { parsedCheckoutToken, urls, confirmationPageUrl } = useCheckoutToken();
  const { externalPaymentSelected, suspend, resume } = useExternalSnippet();

  const checkoutLoading = useState<boolean>('checkout-loading', () => true);

  const error = ref('');

  const checkoutSettings = computed(() => geinsClient.checkoutSettings.value);
  const cart = computed(() => geinsClient.cart.value);
  const redirectUrls = computed(() => geinsClient.redirectUrls.value);
  const currentCountryName = computed(() => geinsClient.currentCountryName.value);
  const checkoutType = computed(() => geinsClient.selectedPaymentMethod.value?.checkoutType);

  const cartEmpty = computed(() => cart.value?.items?.length === 0);
  const isPaymentInvoice = computed(() => checkoutType.value === PaymentOptionCheckoutType.STANDARD);
  const useManualCheckout = computed(
    () =>
      !externalPaymentSelected.value &&
      (isPaymentInvoice.value ||
        (vatIncluded.value && checkoutType.value === PaymentOptionCheckoutType.GEINS_PAY)),
  );

  const defaultAddress: GeinsAddressType = {
    phone: '',
    mobile: '',
    company: '',
    firstName: '',
    lastName: '',
    addressLine1: '',
    addressLine2: '',
    addressLine3: '',
    zip: '',
    careOf: '',
    city: '',
    state: '',
    country: '',
    entryCode: '',
  };

  const state = useState<CheckoutState>('checkout', () => ({
    email: '',
    identityNumber: '',
    message: '',
    billingAddress: { ...defaultAddress },
    shippingAddress: { ...defaultAddress },
    selectedPaymentId: 0,
    selectedShippingId: 0,
    externalSnippetHtml: '',
    useShippingAddress: false,
    showMessageInput: true,
  }));

  const initializeCheckout = async () => {
    const init = async () => {
      try {
        checkoutLoading.value = true;
        loadUser();
        setPaymentAndShippingIds();

        const checkoutInput = createCheckoutInput();
        const checkoutOptions = checkoutInput.checkoutOptions;
        await geinsClient.initializeCheckout(checkoutOptions);

        if (cart.value?.items?.length === 0) {
          geinsLogWarn('cart is empty');
          return;
        }

        geinsLog('checkout initialized', checkoutInput);
      } catch (e) {
        error.value = 'Failed to initialize checkout';
        geinsLogError(error.value, e);
      } finally {
        checkoutLoading.value = false;
      }
    };

    if (parsedCheckoutToken.value) {
      await init();
      return;
    }

    watch(parsedCheckoutToken, init, { once: true });
  };

  const loadUser = () => {
    const user = parsedCheckoutToken.value?.user;
    if (!user) {
      return;
    }
    state.value.email = user.email;
    state.value.identityNumber = user.personalId || '';
    if (user.address) {
      state.value.billingAddress = { ...user.address };
    }
  };

  const updateCheckoutData = async (type: 'billing' | 'shipping', data: CheckoutFormType) => {
    try {
      checkoutLoading.value = true;
      if (!data.address) {
        return;
      }
      if (type === 'billing') {
        state.value.email = data.email || '';
        state.value.identityNumber = data.identityNumber || '';
        state.value.message = data.message || '';

        state.value.billingAddress = markRaw({
          ...data.address,
          country: currentCountryName.value || '',
        });
      } else {
        state.value.shippingAddress = markRaw({
          ...data.address,
          country: currentCountryName.value || '',
        });
      }
    } catch (e) {
      error.value = `Failed to update ${type} address`;
      geinsLogError(error.value, e);
    } finally {
      checkoutLoading.value = false;
    }
  };

  const setPaymentAndShippingIds = (paymentId?: number, shippingId?: number) => {
    state.value.selectedPaymentId =
      paymentId || parsedCheckoutToken.value?.checkoutSettings.selectedPaymentMethodId || 0;
    state.value.selectedShippingId =
      shippingId || parsedCheckoutToken.value?.checkoutSettings.selectedShippingMethodId || 0;
  };

  const updateCheckout = async () => {
    try {
      checkoutLoading.value = true;
      if (externalPaymentSelected.value) {
        suspend();
      }

      const checkoutInput = createCheckoutInput();

      await geinsClient.updateCheckout({
        paymentMethodId: state.value.selectedPaymentId,
        shippingMethodId: state.value.selectedShippingId,
        checkoutOptions: checkoutInput.checkoutOptions,
      });

      const paymentId = geinsClient.selectedPaymentMethod.value?.id;
      const shippingId = geinsClient.selectedShippingMethod.value?.id;

      setPaymentAndShippingIds(paymentId, shippingId);
    } catch (e) {
      error.value = 'Failed to update checkout';
      geinsLogError(error.value, e);
    } finally {
      checkoutLoading.value = false;
      if (externalPaymentSelected.value) {
        resume();
      }
    }
  };

  const createCheckoutInput = (): { cartId: string; checkoutOptions: CheckoutInputType } => {
    const cartId = geinsClient.cart.value?.id || '';

    const skipShippingValidation = !state.value.billingAddress?.zip;

    return {
      cartId: cartId,
      checkoutOptions: {
        email: state.value.email,
        customerType: parsedCheckoutToken.value?.checkoutSettings?.customerType ?? CustomerType.PERSON,
        paymentId: state.value.selectedPaymentId,
        shippingId: state.value.selectedShippingId,
        billingAddress: state.value.billingAddress,
        acceptedConsents: ['order'],
        shippingAddress: state.value.useShippingAddress
          ? state.value.shippingAddress
          : state.value.billingAddress,
        message: state.value.message,
        identityNumber: state.value.identityNumber,
        skipShippingValidation,
      },
    };
  };

  const completeCheckout = async (): Promise<CompleteCheckoutResponse> => {
    checkoutLoading.value = true;
    const response: CompleteCheckoutResponse = {
      success: false,
      orderId: '',
      publicOrderId: '',
      redirectUrl: '',
      message: '',
    };

    try {
      const checkoutInput = createCheckoutInput();
      const orderResult = await geinsClient.createOrder(checkoutInput);
      if (orderResult?.created) {
        response.success = true;
        response.orderId = orderResult.orderId || '';
        response.publicOrderId = orderResult.publicId || '';
        response.redirectUrl = getRedirectUrl(response);
      } else {
        error.value = orderResult?.message || 'Failed to create order';
        geinsLogError(error.value);
        response.success = false;
        response.redirectUrl = getRedirectUrl(response);
        response.message = error.value;
        checkoutLoading.value = false;
      }
    } catch (e) {
      error.value = 'Failed to complete checkout';
      geinsLogError(error.value, e);
      response.success = false;
      response.redirectUrl = getRedirectUrl(response);
      checkoutLoading.value = false;
    }
    return response;
  };

  const getRedirectUrl = (response: CompleteCheckoutResponse): string => {
    try {
      if (response.success) {
        if (urls.value?.success) {
          return urls.value.success;
        }
        const url = geinsClient.updateCheckoutUrlWithParameters({
          url: confirmationPageUrl.value,
          paymentMethodId: state.value.selectedPaymentId,
        });
        return url.replace('{orderId}', response.publicOrderId).replace('{payment.uid}', response.orderId);
      }
      return '';
    } catch (e) {
      error.value = 'Failed to get redirect URLs';
      geinsLogError(error.value, e);
      return '';
    }
  };

  return {
    state,
    checkoutLoading,
    error,
    checkoutSettings,
    cart,
    cartEmpty,
    redirectUrls,
    currentCountryName,
    isPaymentInvoice,
    useManualCheckout,
    initializeCheckout,
    updateCheckoutData,
    updateCheckout,
    completeCheckout,
    getRedirectUrl,
  };
};

================
File: app/composables/useCheckoutToken.ts
================
import { GeinsOMS } from '@geins/oms';
import type {
  CheckoutBrandingType,
  CheckoutRedirectsType,
  CheckoutStyleType,
  CheckoutTokenPayload,
} from '@geins/types';

/**
 * A composable function that provides functionality for managing and parsing checkout tokens.
 * It includes state management, computed properties, and methods for initializing settings,
 * parsing tokens, and applying styles based on checkout branding.
 *
 * @returns {UseCheckoutTokenComposable} An object containing state, computed properties, and methods for managing checkout tokens.
 *
 * @property {Ref<string>} token - Reactive state for the checkout token.
 * @property {Ref<CheckoutTokenPayload>} parsedCheckoutToken - Reactive state for the parsed checkout token payload.
 * @property {Ref<string>} latestVersion - Reactive state for the latest version of the checkout.
 * @property {ComputedRef<string>} latestCheckoutUrl - Computed property for the checkout URL of the latest version.
 * @property {ComputedRef<string>} checkoutPageUrl - Computed property for the checkout page URL of the current version.
 * @property {ComputedRef<string>} confirmationPageUrl - Computed property for the confirmation page URL of the current version.
 * @property {Ref<CheckoutBrandingType | undefined>} branding - Reactive state for the checkout branding settings.
 * @property {ComputedRef<string | undefined>} iconFallback - Computed property for the fallback icon text derived from the branding title.
 * @property {ComputedRef<string | undefined>} icon - Computed property for the branding icon URL.
 * @property {ComputedRef<string | undefined>} logo - Computed property for the branding logo URL.
 * @property {ComputedRef<string | undefined>} title - Computed property for the branding title.
 * @property {Ref<CheckoutRedirectsType | undefined>} urls - Reactive state for the checkout redirect URLs.
 * @property {(filename?: string) => string | null} getProductImageUrl - Method to generate a product image URL based on the filename and account settings.
 * @property {(version?: string) => void} setCurrentVersion - Method to set the current version of the checkout.
 * @property {() => Promise<boolean>} initSettingsFromToken - Method to initialize settings from the checkout token.
 * @property {(token: string) => Promise<CheckoutTokenPayload>} parseToken - Method to parse the checkout token and return its payload.
 * @property {(styles?: CheckoutStyleType) => void} parseStyles - Method to parse and apply styles from the checkout branding.
 * @property {() => Promise<void>} setCssVarsToHead - Method to apply parsed CSS variables to the document's `<head>` for styling.
 */
export const useCheckoutToken = (): UseCheckoutTokenComposable => {
  const config = useRuntimeConfig();
  const { geinsLog, geinsLogError } = useGeinsLog('useCheckoutToken.ts');

  const token = useState<string>('checkout-token');
  const parsedCheckoutToken = useState<CheckoutTokenPayload>('parsed-checkout-token');
  const latestVersion = useState<string>('latest-version', () => config.public.latestVersion);
  const currentVersion = useState<string>('current-version', () => config.public.latestVersion);
  const branding = useState<CheckoutBrandingType | undefined>('checkout-branding');
  const urls = useState<CheckoutRedirectsType | undefined>('checkout-urls');

  const logo = computed(() => branding.value?.logo);
  const icon = computed(() => branding.value?.icon);
  const title = computed(() => branding.value?.title);

  const cssVariables = ref<Record<string, string>>({});

  // Return checkout url for latest version
  const latestCheckoutUrl = computed(() => {
    return `/${latestVersion.value}/checkout/${token.value}`;
  });
  const checkoutPageUrl = computed(() => {
    return `${config.public.baseUrl}/${currentVersion.value}/checkout/${token.value}`;
  });
  // Return confirmation url for current version
  const confirmationPageUrl = computed(() => {
    return `${config.public.baseUrl}/${currentVersion.value}/thank-you/${token.value}/{orderId}`;
  });
  const iconFallback = computed(() => {
    return branding.value?.title
      ?.split(' ')
      .map((word) => word[0])
      .join('')
      .toUpperCase();
  });

  const setCurrentVersion = (version?: string) => {
    if (!version || !/^v\d+$/.test(version)) {
      return;
    }
    currentVersion.value = version;
  };

  const initSettingsFromToken = async (): Promise<CheckoutTokenPayload | undefined> => {
    if (!token.value) return undefined;
    try {
      parsedCheckoutToken.value = await parseToken(token.value);
      geinsLog('parsed checkout token', parsedCheckoutToken.value);
    } catch (error) {
      token.value = '';
      geinsLogError('failed to parse checkout token :::', error);
      return undefined;
    }

    branding.value = parsedCheckoutToken.value?.checkoutSettings?.branding;
    urls.value = parsedCheckoutToken.value?.checkoutSettings?.redirectUrls;

    if (branding.value) {
      parseStyles(branding.value.styles);
    }

    return parsedCheckoutToken.value;
  };

  const parseToken = async (token: string) => {
    return await GeinsOMS.parseCheckoutToken(token);
  };

  const camelToKebab = (str: string) => str.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`);

  const hexToHSL = (hex: string) => {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

    if (!result) return null;

    let r = parseInt(result[1] ?? '0', 16);
    let g = parseInt(result[2] ?? '0', 16);
    let b = parseInt(result[3] ?? '0', 16);

    r /= 255;
    g /= 255;
    b /= 255;
    const max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    let h = 0,
      s,
      l = (max + min) / 2;

    if (max === min) {
      h = s = 0; // achromatic
    } else {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }

      h /= 6;
    }

    h = Math.round(h * 360);
    s = Math.round(s * 100);
    l = Math.round(l * 100);

    return `${h} ${s}% ${l}%`;
  };

  const parseStyles = (styles?: CheckoutStyleType) => {
    cssVariables.value = styles
      ? Object.entries(styles).reduce(
          (acc, [key, value]) => {
            const val = /^#/.test(value) ? hexToHSL(value) : value;
            acc[`--${camelToKebab(key)}`] = val || '';
            return acc;
          },
          {} as Record<string, string>,
        )
      : {};
  };

  const nuxtApp = useNuxtApp();
  const setCssVarsToHead = async () => {
    await nuxtApp.runWithContext(() => {
      useHead({
        style: [
          {
            children: `body { ${Object.entries(cssVariables.value)
              .filter(([_key, value]) => value)
              .map(([key, value]) => `${key}: ${value};`)
              .join(' ')} }`,
          },
        ],
      });
    });
  };

  watch(cssVariables, setCssVarsToHead, { once: true });

  const getProductImageUrl = (filename?: string) => {
    const accountName = parsedCheckoutToken.value?.geinsSettings?.accountName || '';
    const domain = config.public.productImageDomain;
    if (!accountName || !domain || !filename) {
      return null;
    }
    const baseUrl = config.public.productImageBaseUrl
      .replace('{ACCOUNT_NAME}', accountName)
      .replace('{DOMAIN}', domain);
    return `${baseUrl}${filename}`;
  };

  return {
    token,
    parsedCheckoutToken,
    latestVersion,
    latestCheckoutUrl,
    checkoutPageUrl,
    confirmationPageUrl,
    branding,
    iconFallback,
    icon,
    logo,
    title,
    urls,
    getProductImageUrl,
    setCurrentVersion,
    initSettingsFromToken,
    parseToken,
    parseStyles,
    setCssVarsToHead,
  };
};

================
File: app/composables/useExternalSnippet.ts
================
import { ExternalSnippetType } from '#shared/types';
import type { PaymentOptionType } from '@geins/types';
import { GeinsPaymentType, PaymentOptionCheckoutType } from '@geins/types';

declare global {
  interface Window {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _klarnaCheckout?: (callback: (api: any) => void) => void;
    _briqpay?: {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      subscribe: (event: string, callback: (data: any) => void) => void;
      v3: {
        suspend: () => void;
        resume: () => void;
      };
    };
    collector?: {
      checkout: {
        api: {
          suspend: () => void;
          resume: () => void;
        };
      };
    };
    scoApi?: {
      setCheckoutEnabled: (enabled: boolean) => void;
    };
    avardaCheckout?: {
      refreshForm: () => void;
    };
  }
}

/**
 * A composable function for managing external snippets in the checkout process.
 *
 * @returns {UseExternalSnippetComposable} An object containing state and methods for external snippet management.
 *
 * @property {Ref<string>} externalSnippetHtml - Reactive string containing the HTML of the external snippet.
 * @property {Ref<boolean>} externalSnippetRendered - Reactive boolean indicating if the external snippet is rendered.
 * @property {Ref<boolean>} suspended - Reactive boolean indicating if the external snippet is suspended.
 * @property {ComputedRef<boolean>} externalPaymentSelected - Computed property indicating if an external payment method is selected.
 * @property {ComputedRef<boolean>} hasExternalSnippet - Computed property indicating if an external snippet exists.
 * @property {(type: ExternalSnippetType, payment?: PaymentOptionType) => Promise<void>} renderExternalSnippet - Method to render the external snippet.
 * @property {() => void} initExternalEventListeners - Method to initialize event listeners for the external snippet.
 * @property {() => void} suspend - Method to suspend the external snippet.
 * @property {() => void} resume - Method to resume the external snippet.
 */
export const useExternalSnippet = (): UseExternalSnippetComposable => {
  const { geinsLog, geinsLogError, geinsLogInfo } = useGeinsLog('useExternalSnippet.ts');
  const { selectedPaymentMethod } = useGeinsClient();

  const externalSnippetHtml = useState<string>('external-html', () => '');
  const externalSnippetRendered = useState<boolean>('external-rendered', () => false);
  const suspended = useState<boolean>('external-suspended', () => false);

  const hasExternalSnippet = computed(() => !!externalSnippetHtml.value);

  const externalPaymentSelected = computed(() => {
    const checkoutType = selectedPaymentMethod.value?.checkoutType;

    return Boolean(
      checkoutType === PaymentOptionCheckoutType.EXTERNAL ||
        (checkoutType === PaymentOptionCheckoutType.GEINS_PAY && selectedPaymentMethod.value?.paymentData),
    );
  });

  const renderExternalSnippet = async (
    type: ExternalSnippetType = ExternalSnippetType.Checkout,
    payment?: PaymentOptionType,
  ) => {
    if (type === ExternalSnippetType.Checkout) {
      const paymentMethod = payment || selectedPaymentMethod.value;
      if (!paymentMethod?.paymentData || import.meta.server) {
        return;
      }
      externalSnippetHtml.value = '';
      if (paymentMethod.paymentType === GeinsPaymentType.AvardaType) {
        useHead({
          script: [
            {
              src: 'https://stage.checkout-cdn.avarda.com/cdn/static/js/main.js',
              async: true,
            },
          ],
        });
      }
      externalSnippetHtml.value += paymentMethod.paymentData || '';
    }

    if (!externalSnippetHtml.value) {
      geinsLogError('no external snippet found');
      return;
    }

    await nextTick();

    const checkoutExternal = document.getElementById(`${type}-external`);
    const scriptTags = checkoutExternal?.querySelectorAll('script');

    scriptTags?.forEach((scriptTag) => {
      const newScript = document.createElement('script');
      if (scriptTag.src) {
        // External script
        newScript.src = scriptTag.src;
        newScript.async = true;
      } else {
        // Inline script
        newScript.textContent = scriptTag.innerHTML;
      }
      if (checkoutExternal) {
        checkoutExternal.appendChild(newScript);
        initExternalEventListeners();
      } else {
        geinsLogError('external snippet container missing');
        return;
      }
    });
    externalSnippetRendered.value = true;
    geinsLog('external snippet rendered');
  };

  const initExternalEventListeners = () => {
    if (selectedPaymentMethod.value?.paymentType === GeinsPaymentType.GeinsPayType) {
      if (window._briqpay) {
        window._briqpay.subscribe('make_decision', function (data) {
          geinsLogInfo('make_decision', data);
        });
      }
    }
  };

  const suspend = () => {
    if (externalSnippetRendered.value) {
      switch (selectedPaymentMethod.value?.paymentType) {
        case GeinsPaymentType.KlarnaType:
          if (window._klarnaCheckout) {
            window._klarnaCheckout(function (api) {
              api.suspend();
            });
          }
          suspended.value = true;
          return;
        case GeinsPaymentType.SveaType:
          if (window.scoApi) {
            window.scoApi.setCheckoutEnabled(false);
          }
          suspended.value = true;
          return;
        case GeinsPaymentType.WalleyType:
          if (window.collector) {
            window.collector.checkout.api.suspend();
          }
          suspended.value = true;
          return;
        case GeinsPaymentType.GeinsPayType:
          if (window._briqpay) {
            window._briqpay.v3.suspend();
          }
          suspended.value = true;
          return;
      }
    }
  };
  const resume = () => {
    if (externalSnippetRendered.value && suspended.value) {
      switch (selectedPaymentMethod.value?.paymentType) {
        case GeinsPaymentType.KlarnaType:
          if (window._klarnaCheckout) {
            window._klarnaCheckout(function (api) {
              api.resume();
            });
          } else {
            setTimeout(resume, 100);
          }
          return;
        case GeinsPaymentType.SveaType:
          if (window.scoApi) {
            window.scoApi.setCheckoutEnabled(true);
          }
          return;
        case GeinsPaymentType.WalleyType:
          if (window.collector) {
            window.collector.checkout.api.resume();
          }
          return;
        case GeinsPaymentType.AvardaType:
          if (window.avardaCheckout) {
            window.avardaCheckout.refreshForm();
          }
          return;
        case GeinsPaymentType.GeinsPayType:
          if (window._briqpay) {
            window._briqpay.v3.resume();
          }
          return;
      }
      suspended.value = false;
    } else if (!externalSnippetRendered.value) {
      renderExternalSnippet();
    }
  };

  return {
    externalSnippetHtml,
    externalPaymentSelected,
    externalSnippetRendered,
    hasExternalSnippet,
    suspended,
    renderExternalSnippet,
    initExternalEventListeners,
    suspend,
    resume,
  };
};

================
File: app/composables/useGeinsClient.ts
================
import { Channel, extractParametersFromUrl } from '@geins/core';
import type {
  CartType,
  CheckoutInputType,
  CheckoutRedirectsType,
  CheckoutSettings,
  CheckoutSummaryType,
  CheckoutType,
  CheckoutUrlsInputType,
  GeinsChannelTypeType,
  GeinsSettings,
  GeinsUserType,
  GetCheckoutOptions,
  PaymentOptionType,
  ShippingOptionType,
} from '@geins/types';
import { CustomerType, PaymentOptionCheckoutType } from '@geins/types';

/**
 * A composable function that provides functionality for managing the Geins client.
 * It includes state management, computed properties, and methods for initializing,
 * updating, and interacting with the checkout process, cart, and orders.
 *
 * @returns {UseGeinsClientComposable} An object containing state, computed properties, and methods for managing the Geins client.
 *
 * @property {Ref<GeinsSettings | undefined>} geinsSettings - Reactive state for Geins settings.
 * @property {Ref<CheckoutSettings | undefined>} checkoutSettings - Reactive state for checkout settings.
 * @property {Ref<CartType | undefined>} cart - Reactive state for the current cart.
 * @property {Ref<PaymentOptionType[]>} paymentMethods - Reactive state for available payment methods.
 * @property {Ref<ShippingOptionType[]>} shippingMethods - Reactive state for available shipping methods.
 * @property {Ref<GeinsUserType | undefined>} user - Reactive state for the user information.
 * @property {Ref<CheckoutType | undefined>} checkoutObject - Reactive state for the checkout object.
 * @property {Ref<CheckoutRedirectsType | undefined>} redirectUrls - Reactive state for redirect URLs.
 * @property {Ref<CheckoutUrlsInputType | undefined>} checkoutUrls - Reactive state for checkout URLs.
 * @property {Ref<CheckoutSummaryType | undefined>} orderSummary - Reactive state for the checkout summary.
 * @property {ComputedRef<PaymentOptionType | undefined>} selectedPaymentMethod - Computed property for the selected payment method.
 * @property {ComputedRef<ShippingOptionType | undefined>} selectedShippingMethod - Computed property for the selected shipping method.
 * @property {Ref<string>} currentCountryName - Reactive state for the current country name.
 * @property {() => Promise<boolean>} initializeSummary - Method to initialize the summary.
 * @property {(checkoutOptions: CheckoutInputType) => Promise<void>} initializeCheckout - Method to initialize the checkout process.
 * @property {(options?: { paymentMethodId?: number; shippingMethodId?: number; checkoutOptions?: CheckoutInputType }, useSSR?: boolean) => Promise<CheckoutType>} getCheckout - Method to retrieve the checkout object.
 * @property {(orderId: string, paymentMethod: string, cartId: string) => Promise<CheckoutSummaryType | undefined>} getCheckoutSummary - Method to retrieve the checkout summary.
 * @property {(options?: { paymentMethodId?: number; shippingMethodId?: number; checkoutOptions?: CheckoutInputType }) => Promise<void>} updateCheckout - Method to update the checkout process.
 * @property {(args: { url: string; paymentMethodId: number }) => string} updateCheckoutUrlWithParameters - Method to update a checkout URL with parameters.
 * @property {(checkoutInput: { cartId: string; checkoutOptions: CheckoutInputType }) => Promise<any>} createOrder - Method to create an order.
 * @property {() => Promise<any>} completeCart - Method to complete the cart.
 */
export const useGeinsClient = (): UseGeinsClientComposable => {
  const { $geinsOMS, $createGeinsClient } = useNuxtApp();
  const { geinsLog, geinsLogError } = useGeinsLog('useGeinsClient.ts');
  const { parsedCheckoutToken, confirmationPageUrl, checkoutPageUrl } = useCheckoutToken();
  const { vatIncluded } = usePrice();

  const geinsSettings = ref<GeinsSettings>();
  const checkoutSettings = ref<CheckoutSettings>();
  const user = ref<GeinsUserType>();
  const checkoutObject = ref<CheckoutType>();
  const redirectUrls = ref<CheckoutRedirectsType>();
  const checkoutUrls = ref<CheckoutUrlsInputType>();
  const orderSummary = ref<CheckoutSummaryType>();

  const geinsChannel = useState<GeinsChannelTypeType | undefined>('geins-channel');
  const cart = useState<CartType>('cart');
  const paymentMethods = useState<PaymentOptionType[]>('payment-methods', () => []);
  const shippingMethods = useState<ShippingOptionType[]>('shipping-methods', () => []);
  const currentCountryName = useState<string>('country-name');

  const selectedPaymentMethod = computed(() => {
    return paymentMethods.value?.find((method) => method.isSelected);
  });

  const selectedShippingMethod = computed(() => {
    return shippingMethods.value?.find((method) => method.isSelected);
  });

  const initializeClientFromToken = async (): Promise<void> => {
    checkoutSettings.value = parsedCheckoutToken.value.checkoutSettings;
    user.value = parsedCheckoutToken.value.user;
    geinsSettings.value = parsedCheckoutToken.value.geinsSettings;
    redirectUrls.value = checkoutSettings.value?.redirectUrls;

    vatIncluded.value = parsedCheckoutToken.value.checkoutSettings.customerType === CustomerType.PERSON;
    cart.value = { id: parsedCheckoutToken.value.cartId } as CartType;
  };

  const setGeinsClient = async (): Promise<void> => {
    await initializeClientFromToken();

    if (!geinsSettings.value) {
      throw new Error('Failed to initialize geinsSettings from token');
    }

    await $createGeinsClient(geinsSettings.value);
    await setGeinsChannel();
    geinsLog('client initialized with settings', geinsSettings.value);
  };

  const setGeinsChannel = async (): Promise<void> => {
    if (!geinsSettings.value) {
      throw new Error('Geins settings are missing');
    }
    try {
      const channel = Channel.getInstance(geinsSettings.value);
      geinsChannel.value = await channel.get();
      geinsLog('channel set', geinsChannel.value);
      if (geinsChannel.value) {
        const currentMarketObj = geinsChannel.value.markets?.find(
          (m) => m?.alias === geinsSettings.value?.market,
        );
        currentCountryName.value = currentMarketObj?.country?.name || '';
      }
    } catch (e) {
      geinsLogError('Failed to set Geins channel', e);
      throw e;
    }
  };

  const copyCart = async (): Promise<void> => {
    if (checkoutSettings.value?.copyCart) {
      try {
        if (!cart.value?.id) {
          throw new Error('Cart ID is missing');
        }
        const newCartId = await $geinsOMS.value?.cart.copy({ id: cart.value?.id, loadCopy: true });
        cart.value = { id: newCartId } as CartType;
        geinsLog('cart successfully copied');
      } catch (e) {
        geinsLogError('Failed to copy cart', e);
        throw new Error('Failed to copy cart');
      }
    }
  };

  const initializeSummary = async (): Promise<boolean> => {
    try {
      await setGeinsClient();
    } catch (e) {
      geinsLogError('Failed to initialize summary', e);
      throw e;
    }
    return true;
  };

  const initializeCheckout = async (checkoutOptions: CheckoutInputType): Promise<void> => {
    await setGeinsClient();
    await copyCart();

    const checkout = await getCheckout({
      paymentMethodId: checkoutOptions.paymentId,
      shippingMethodId: checkoutOptions.shippingId,
      checkoutOptions,
    });

    if (checkout) {
      if (checkout.cart) {
        cart.value = checkout.cart;
      }
      paymentMethods.value = setPaymentMethods(checkout.paymentOptions || []);
      shippingMethods.value = setShippingMethods(checkout.shippingOptions || []);
    }
  };

  const getCheckoutSummary = async (
    orderId: string,
    paymentMethod: string,
    cartId: string,
  ): Promise<CheckoutSummaryType | undefined> => {
    if (!$geinsOMS.value) {
      throw new Error('Geins OMS is not initialized');
    }
    const summary = await fetchFromClient(
      'get-summary',
      $geinsOMS.value.checkout.summary({ orderId, paymentMethod }),
    );
    if (!summary) {
      throw new Error('Failed to get summary');
    }
    const orderCart = await fetchFromClient('get-cart', $geinsOMS.value?.cart.get(cartId));
    if (!orderCart) {
      throw new Error('Failed to get cart');
    }
    cart.value = orderCart;
    if (!cart.value.completed) {
      await completeCart();
    }
    return summary;
  };

  const updateCheckout = async (options?: {
    paymentMethodId?: number;
    shippingMethodId?: number;
    checkoutOptions?: CheckoutInputType;
  }): Promise<void> => {
    const checkout = await getCheckout(options, false);

    if (checkout) {
      if (checkout.cart) {
        cart.value = checkout.cart;
      }
      paymentMethods.value = setPaymentMethods(checkout.paymentOptions || []);
      shippingMethods.value = setShippingMethods(checkout.shippingOptions || []);
    }
  };

  const getCheckout = async (
    options?: {
      paymentMethodId?: number;
      shippingMethodId?: number;
      checkoutOptions?: CheckoutInputType;
    },
    useSSR: boolean = true,
  ): Promise<CheckoutType> => {
    const paymentMethodId = checkoutSettings.value?.selectedPaymentMethodId || options?.paymentMethodId;
    const shippingMethodId = checkoutSettings.value?.selectedShippingMethodId || options?.shippingMethodId;

    checkoutUrls.value = getCheckoutUrls(paymentMethodId);

    const args: GetCheckoutOptions = {
      cartId: cart.value?.id,
      paymentMethodId,
      shippingMethodId,
      checkoutOptions: {
        checkoutUrls: checkoutUrls.value,
        ...options?.checkoutOptions,
      },
    };

    if (!$geinsOMS.value) {
      throw new Error('Geins OMS is not initialized');
    }

    let checkout: CheckoutType | undefined;
    if (!useSSR) {
      checkout = await $geinsOMS.value.checkout.get(args);
    } else {
      checkout = await fetchFromClient('get-checkout', $geinsOMS.value.checkout.get(args));
    }

    if (!checkout) {
      throw new Error('Failed to get checkout');
    }
    return checkout;
  };

  const fetchFromClient = async <T>(key: string, promise: Promise<T>) => {
    const { data, error } = await useAsyncData(key, () => {
      return promise;
    });
    if (error.value) {
      throw new Error(`Failed to fetch ${key}: ${error.value}`);
    }
    return data.value;
  };

  const getCheckoutUrls = (paymentMethodId?: number): CheckoutUrlsInputType | undefined => {
    const urls: CheckoutUrlsInputType = {};
    if (!paymentMethodId) {
      throw new Error('Payment method ID is required.');
    }

    if (checkoutSettings.value?.redirectUrls?.success) {
      urls.redirectUrl = checkoutSettings.value.redirectUrls.success;
    } else {
      urls.redirectUrl = confirmationPageUrl.value.replace('{orderId}', '{payment.uid}');
    }

    urls.redirectUrl = updateCheckoutUrlWithParameters({
      url: urls.redirectUrl || '',
      paymentMethodId,
    });

    if (checkoutPageUrl.value) {
      urls.checkoutPageUrl = checkoutPageUrl.value;
    }

    if (checkoutSettings.value?.redirectUrls?.terms) {
      urls.termsPageUrl = checkoutSettings.value.redirectUrls.terms;
    }

    return urls;
  };

  const updateCheckoutUrlWithParameters = (args: { url: string; paymentMethodId: number }): string => {
    const { url, params } = extractParametersFromUrl(args.url);

    const parameters = $geinsOMS.value?.checkout.generateExternalCheckoutUrlParameters(params);
    if (!parameters) {
      return url;
    }
    const queryParams = Array.from(parameters.entries())
      .map(([key, value]) => `${key}=${value}`)
      .join('&');
    let newUrl = `${url}?${queryParams}`;
    newUrl = newUrl.replace('{geins.paymentMethodId}', args.paymentMethodId.toString());
    if (selectedPaymentMethod.value?.checkoutType === PaymentOptionCheckoutType.STANDARD) {
      newUrl = newUrl
        .replace('{geins.cartid}', cart.value?.id || '')
        .replace('{geins.paymentType}', PaymentOptionCheckoutType.STANDARD);
    }

    return newUrl;
  };

  const setPaymentMethods = (methods: PaymentOptionType[]): PaymentOptionType[] => {
    if (!Array.isArray(methods) || methods.length === 0) return [];
    if (
      !Array.isArray(checkoutSettings.value?.availablePaymentMethodIds) ||
      checkoutSettings.value?.availablePaymentMethodIds.length === 0
    )
      return methods;
    const returnMethods: PaymentOptionType[] = [];
    const order = checkoutSettings.value.availablePaymentMethodIds as number[];

    for (const methodId of order) {
      const method = methods.find((m) => m.id === methodId);
      if (method) returnMethods.push(method);
    }

    return returnMethods;
  };

  const setShippingMethods = (methods: ShippingOptionType[]): ShippingOptionType[] => {
    if (!Array.isArray(methods) || methods.length === 0) return [];
    if (
      !Array.isArray(checkoutSettings.value?.availableShippingMethodIds) ||
      checkoutSettings.value.availableShippingMethodIds.length === 0
    )
      return methods;

    const returnMethods: ShippingOptionType[] = [];
    const order = checkoutSettings.value.availableShippingMethodIds as number[];

    for (const methodId of order) {
      const method = methods.find((m) => m.id === methodId);
      if (method) returnMethods.push(method);
    }
    return returnMethods;
  };

  const createOrder = async (checkoutInput: { cartId: string; checkoutOptions: CheckoutInputType }) => {
    const result = await $geinsOMS.value?.checkout.createOrder(checkoutInput);
    if (!result) {
      throw new Error('Failed to create order');
    }
    geinsLog('order created', result);
    return result;
  };

  const completeCart = async () => {
    const result = await $geinsOMS.value?.cart.complete();
    if (!result) {
      throw new Error('Failed to complete cart');
    }
    geinsLog('cart successfully completed');
    return result;
  };

  return {
    geinsSettings,
    checkoutSettings,
    cart,
    paymentMethods,
    shippingMethods,
    user,
    checkoutObject,
    redirectUrls,
    checkoutUrls,
    orderSummary,
    selectedPaymentMethod,
    selectedShippingMethod,
    currentCountryName,
    initializeSummary,
    initializeCheckout,
    getCheckout,
    getCheckoutSummary,
    updateCheckout,
    updateCheckoutUrlWithParameters,
    createOrder,
    completeCart,
  };
};

================
File: app/composables/useGeinsLog.ts
================
/**
 * Custom hook to use Geins logging functions.
 *
 * @param {string} [scope=''] - The scope of the log messages.
 * @returns {UseGeinsLogComposable} An object containing the logging functions:
 * - `geinsLog`: General log function.
 * - `geinsLogError`: Error log function.
 * - `geinsLogInfo`: Info log function.
 * - `geinsLogWarn`: Warning log function.
 */
export function useGeinsLog(scope: string = ''): UseGeinsLogComposable {
  const config = useRuntimeConfig();
  const { geinsLog, geinsLogError, geinsLogInfo, geinsLogWarn } = log(scope, config.public.debug);

  return {
    geinsLog,
    geinsLogError,
    geinsLogInfo,
    geinsLogWarn,
  };
}

================
File: app/composables/usePrice.ts
================
import type { PriceType } from '@geins/types';
/**
 * A composable function for managing price-related operations.
 *
 * @returns {UsePriceComposable} An object containing state and methods for price management.
 *
 * @property {Ref<boolean>} vatIncluded - Reactive boolean indicating if VAT is included in prices.
 * @property {(price: PriceType) => string} getSellingPrice - Method to get the formatted selling price.
 * @property {(price: PriceType) => string} getRegularPrice - Method to get the formatted regular price.
 */
export const usePrice = (): UsePriceComposable => {
  const vatIncluded = useState<boolean>('vat-included');

  const getSellingPrice = (price: PriceType) => {
    return vatIncluded.value ? price.sellingPriceIncVatFormatted : price.sellingPriceExVatFormatted;
  };

  const getRegularPrice = (price: PriceType) => {
    return vatIncluded.value ? price.regularPriceIncVatFormatted : price.regularPriceExVatFormatted;
  };

  return {
    vatIncluded,
    getSellingPrice,
    getRegularPrice,
  };
};

================
File: app/composables/useSummary.ts
================
import type { CheckoutQueryParameters, CheckoutSummaryType } from '@geins/types';
import { PaymentOptionCheckoutType } from '@geins/types';

/**
 * A composable function for managing the checkout summary.
 *
 * @returns {UseSummaryComposable} An object containing state and methods for summary management.
 *
 * @property {Ref<boolean>} checkoutLoading - Reactive boolean indicating if the summary is loading.
 * @property {Ref<string>} error - Reactive string for storing error messages.
 * @property {ComputedRef<CartType>} cart - Computed property for the current cart.
 * @property {Ref<CheckoutSummaryType | undefined>} orderSummary - Reactive reference for the order summary.
 * @property {Ref<string>} summaryOrderId - Reactive string for the summary order ID.
 * @property {(orderId: string, checkoutQueryParams: CheckoutQueryParameters) => Promise<void>} initializeSummary - Method to initialize the summary.
 */
export const useSummary = (): UseSummaryComposable => {
  const geinsClient = useGeinsClient();
  const { geinsLog, geinsLogError } = useGeinsLog('useSummary.ts');
  const { parsedCheckoutToken } = useCheckoutToken();
  const { externalSnippetHtml } = useExternalSnippet();

  const checkoutLoading = useState<boolean>('checkout-loading', () => true);

  const error = ref('');
  const orderSummary = ref<CheckoutSummaryType>();
  const summaryOrderId = ref('');

  const cart = computed(() => geinsClient.cart.value);

  const initializeSummary = async (orderId: string, checkoutQueryParams: CheckoutQueryParameters) => {
    const init = async () => {
      try {
        checkoutLoading.value = true;
        await geinsClient.initializeSummary();

        orderSummary.value = await getCheckoutSummary({ orderId, checkoutQueryParams });
        geinsLog('order summary fetched', orderSummary.value);
      } catch (e) {
        error.value = 'Failed to initialize summary';
        geinsLogError(error.value, e);
      } finally {
        checkoutLoading.value = false;
      }
    };

    if (parsedCheckoutToken.value) {
      await init();
      return;
    }

    watch(parsedCheckoutToken, init, { once: true });
  };

  const getCheckoutSummary = async (args: {
    orderId: string;
    checkoutQueryParams: CheckoutQueryParameters;
  }): Promise<CheckoutSummaryType | undefined> => {
    const queryStringArgs = parseQueryParameters(args.checkoutQueryParams);
    summaryOrderId.value = queryStringArgs.orderId;
    if (!args.orderId && !queryStringArgs.orderId) {
      throw new Error('Missing orderId');
    }

    queryStringArgs.orderId = args.orderId || queryStringArgs.orderId;

    const { orderId, paymentMethod, cartId } = queryStringArgs;

    const orderSummary = await geinsClient.getCheckoutSummary(orderId, paymentMethod, cartId);

    if (!orderSummary) {
      throw new Error('Failed to get order summary');
    }
    if (orderSummary.htmlSnippet) {
      externalSnippetHtml.value = orderSummary.htmlSnippet;
    }

    return orderSummary;
  };

  const parseQueryParameters = (checkoutQueryParams: CheckoutQueryParameters) => {
    const orderId = checkoutQueryParams['geins-uid'] ?? '';
    const paymentMethod = checkoutQueryParams['geins-pt'] ?? PaymentOptionCheckoutType.STANDARD;
    const cartId = checkoutQueryParams['geins-cart'] ?? '';

    return { orderId, paymentMethod, cartId };
  };

  return {
    checkoutLoading,
    error,
    cart,
    orderSummary,
    summaryOrderId,
    initializeSummary,
  };
};

================
File: app/lang/en-US.ts
================
export default defineI18nLocale(async () => {
  return {
    powered_by: 'Powered by',
    checkout: 'Checkout',
    go_back: 'Go back',
    show_details: 'Show details',
    hide_details: 'Hide details',
    cart_summary_inc_vat_and_shipping: 'inc. VAT and shipping',
    cart_summary_subtotal: 'Subtotal',
    cart_summary_discount: 'Discount',
    cart_summary_shipping_fee: 'Shipping fee',
    cart_summary_estimated_shipping_fee: 'Estimated shipping fee',
    cart_summary_regular_price: 'Regular price',
    cart_summary_left_to_free_shipping: 'left to free shipping',
    cart_summary_vat: 'VAT',
    cart_summary_total_ex_balance: 'Total before balance',
    cart_summary_total: 'Total',
    cart_summary_balance: 'Balance',
    free_shipping: 'Free shipping',
    order_number: 'Order number',
    confirmation_page_title: 'Thank you for your order!',
    confirmation_page_text:
      'Your order has been successfully placed. You will receive an email confirmation shortly.',
    billing_address: 'Billing Address',
    your_information: 'Your Information',
    address_must_be_in_country: 'The address must be in {country}.',
    ship_to_different_address: 'Ship to a different address',
    shipping_address: 'Shipping Address',
    complete_checkout: 'Complete Checkout',
    processing: 'Processing',
    go_to_payment: 'Go to Payment',
    continue_shopping: 'Continue shopping',
    loading: 'Loading',
    terms_and_conditions: 'Terms & Conditions',
    privacy_policy: 'Privacy Policy',
    ex_vat: 'ex. VAT',
    form_label_email: 'Email',
    form_label_phone: 'Phone',
    form_label_first_name: 'First Name',
    form_label_last_name: 'Last Name',
    form_label_company: 'Company',
    form_label_org_nr: 'Organization Number',
    form_label_street_address: 'Street Address',
    form_label_city: 'City',
    form_label_zip: 'Zip Code',
    form_label_message: 'Message',
    form_label_care_of: 'C/O',
    form_label_optional: 'optional',
    form_validation_email: 'Invalid email address',
    form_validation_phone_required: 'Phone number is required',
    form_validation_identity_number_required: 'Identity number is required',
    form_validation_company_required: 'Company name is required',
    form_validation_first_name_required: 'First name is required',
    form_validation_last_name_required: 'Last name is required',
    form_validation_street_address_required: 'Street address is required',
    form_validation_zip_required: 'Zip code is required',
    form_validation_city_required: 'City is required',
    cart_empty: 'Your cart is empty',
    cart_empty_desc: 'Add items to your cart to proceed with checkout.',
    error_create_order: 'Failed to create order',
  };
});

================
File: app/layouts/confirm.vue
================
<script setup lang="ts">
import Logo from '@/assets/logos/geins.svg';
</script>

<template>
  <div
    :class="
      cn(
        'bg-background px-[4vw] py-6 text-foreground lg:flex lg:items-center lg:h-full lg:min-h-screen lg:overflow-y-auto lg:overflow-x-hidden',
      )
    "
  >
    <div class="my-auto flex flex-col gap-6 lg:size-full lg:justify-center lg:gap-[2vh]">
      <Header :confirm-page="true" />
      <slot name="summary" />
      <slot name="cart" />
      <footer class="mx-auto flex gap-2 py-6">
        <div>
          <p class="text-[0.6rem] text-foreground/70 lg:text-xs">{{ $t('powered_by') }}</p>
        </div>
        <div class="text-foreground">
          <Logo :font-controlled="false" class="h-4 w-auto lg:h-5" />
        </div>
      </footer>
    </div>
  </div>
</template>

================
File: app/layouts/default.vue
================
<script setup lang="ts">
import Logo from '@/assets/logos/geins.svg';
const { path } = useRoute();
const isHomePage = computed(() => path === '/');
</script>

<template>
  <div class="grid lg:grid-cols-2">
    <div
      :class="
        cn('bg-background px-[4vw] py-6 text-foreground lg:overflow-y-auto lg:overflow-x-hidden lg:py-0')
      "
    >
      <div class="flex flex-col gap-6 lg:h-full lg:justify-center lg:py-4">
        <Header v-if="!isHomePage" class="lg:mt-[-5vh]" />
        <slot name="cart" />
      </div>
    </div>
    <div
      class="bg-card px-[4vw] py-12 text-card-foreground lg:flex lg:h-screen lg:flex-col lg:overflow-y-auto lg:overflow-x-hidden lg:py-[8vh]"
    >
      <div class="lg:my-auto">
        <slot name="checkout" />
      </div>
    </div>
    <footer
      v-if="!isHomePage"
      class="mx-auto flex gap-2 py-6 lg:absolute lg:bottom-8 lg:left-1/2 lg:grid lg:-translate-x-1/2 lg:grid-cols-2 lg:gap-6 lg:py-0"
    >
      <div>
        <p class="text-[0.6rem] text-foreground/70 lg:text-xs">{{ $t('powered_by') }}</p>
      </div>
      <div class="lg:text-card-foreground">
        <Logo :font-controlled="false" class="h-4 w-auto lg:h-5" />
      </div>
    </footer>
  </div>
</template>

================
File: app/lib/utils.ts
================
import type { Updater } from '@tanstack/vue-table'
import type { Ref } from 'vue'
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function valueUpdater<T extends Updater<any>>(updaterOrValue: T, ref: Ref) {
  ref.value
    = typeof updaterOrValue === 'function'
      ? updaterOrValue(ref.value)
      : updaterOrValue
}

================
File: app/middleware/default.global.ts
================
export default defineNuxtRouteMiddleware(async ({ params, path }) => {
  const { token, initSettingsFromToken, setCurrentVersion } = useCheckoutToken();

  token.value = params?.token?.toString() || '';

  if (path !== '/' && token.value === '') {
    return navigateTo('/');
  }

  if (token.value) {
    const settingsInitiated = await initSettingsFromToken();
    if (!settingsInitiated) {
      return navigateTo('/');
    }
  }

  setCurrentVersion(path.split('/')[1]);
});

================
File: app/pages/v0/checkout/[token].vue
================
<script setup lang="ts">
import { ExternalSnippetType } from '#shared/types';
const { urls } = useCheckoutToken();
const { cart, cartEmpty, useManualCheckout, isPaymentInvoice, initializeCheckout, updateCheckout } =
  useCheckout();
const { externalPaymentSelected } = useExternalSnippet();

await initializeCheckout();

const nextStep = async () => {
  await updateCheckout();
};
</script>

<template>
  <div>
    <NuxtLayout name="default">
      <template #cart>
        <Cart
          v-if="cart"
          :cart="cart"
          class="overflow-y-auto overflow-x-hidden lg:max-h-[72vh] lg:min-h-56"
        />
        <BottomUrls v-if="urls" :urls="urls" />
      </template>

      <template #checkout>
        <div v-auto-animate class="mx-auto w-full max-w-2xl">
          <ManualCheckout
            v-if="useManualCheckout || cartEmpty"
            :enable-complete-checkout="isPaymentInvoice"
            :disabled="cartEmpty"
            @completed="nextStep"
          />
          <div v-else-if="externalPaymentSelected" class="rounded-lg bg-white p-3 lg:p-8">
            <ExternalSnippet :type="ExternalSnippetType.Checkout" />
          </div>
        </div>
      </template>
    </NuxtLayout>
  </div>
</template>

================
File: app/pages/v0/thank-you/[token]/[orderId].vue
================
<script setup lang="ts">
import { ExternalSnippetType } from '#shared/types';
const { urls } = useCheckoutToken();
const { orderSummary, summaryOrderId, initializeSummary } = useSummary();
const { hasExternalSnippet } = useExternalSnippet();
const { cart } = useCheckout();
const { query, params } = useRoute();
const orderId = params.orderId?.toString() || '';

if (!orderId) {
  navigateTo('/');
}

await initializeSummary(orderId, query);
</script>

<template>
  <div>
    <NuxtLayout name="confirm">
      <template #summary>
        <Card class="mx-auto w-full max-w-3xl">
          <CardContent>
            <ExternalSnippet v-if="hasExternalSnippet" :type="ExternalSnippetType.Summary" />
            <div v-else-if="orderSummary" class="flex flex-col items-center lg:p-6 lg:pb-3">
              <p class="mt-2 text-center text-xs font-light uppercase text-card-foreground lg:text-sm">
                {{ $t('order_number') }}:
                <span class="inline-block rounded-lg bg-background px-2 py-1 font-bold text-foreground">
                  #{{ summaryOrderId }}
                </span>
              </p>
              <h1 class="mb-6 text-center text-xl font-bold lg:mb-8 lg:text-3xl">
                {{ $t('confirmation_page_title') }} ✨
              </h1>
              <p
                class="text-md mx-auto mb-8 max-w-sm text-center font-light text-card-foreground/80 lg:mb-12 lg:text-lg"
              >
                {{ $t('confirmation_page_text') }}
              </p>
              <Button
                v-if="urls?.continue"
                as-child
                variant="outline"
                class="inline-flex items-center border-foreground/60 hover:border-foreground/20 hover:bg-transparent hover:text-foreground md:hidden"
              >
                <a :href="urls.continue">
                  {{ $t('continue_shopping') }}
                  <LucideArrowRight />
                </a>
              </Button>
              <CartSummary v-if="cart?.summary" :summary="cart.summary" class="mt-4 w-full" />
            </div>
          </CardContent>
        </Card>
      </template>
      <template #cart>
        <Cart v-if="cart" :cart="cart" />
      </template>
    </NuxtLayout>
  </div>
</template>

================
File: app/pages/index.vue
================
<script setup lang="ts">
import Logo from '@/assets/logos/geins.svg';
</script>
<template>
  <div>
    <div class="color-card absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-center">
      <p class="text-muted-foreground text-xs">{{ $t('powered_by') }}</p>
      <Logo :font-controlled="false" class="h-28 w-auto text-card-foreground" />
    </div>
    <NuxtLayout name="default" class="hidden lg:grid">
      <template #checkout>
        <div />
      </template>
    </NuxtLayout>
  </div>
</template>

================
File: app/pages/redirect.vue
================
<script setup lang="ts">
import { NuxtLayout } from '#components';

const { latestCheckoutUrl } = useCheckoutToken();
navigateTo(latestCheckoutUrl.value);
</script>
<template>
  <NuxtLayout />
</template>

================
File: app/plugins/geins-core.ts
================
import { defineNuxtPlugin } from '#app';
import { GeinsCore, RuntimeContext, type GeinsSettings } from '@geins/core';
import { GeinsOMS } from '@geins/oms';

export default defineNuxtPlugin((nuxtApp) => {
  const geinsCoreInstance = ref<GeinsCore | undefined>();
  const geinsOMSInstance = ref<GeinsOMS | undefined>();

  // Helper to create a new GeinsCore instance
  const createGeinsCore = async (settings: GeinsSettings): Promise<GeinsCore> => {
    // Check if it's SSR or client
    const isSSR = import.meta.server;

    // SSR: Create a fresh instance for each request
    if (isSSR) {
      // Use SSR context to store instance per request
      if (nuxtApp.ssrContext && !nuxtApp.ssrContext?.geinsCoreInstance) {
        nuxtApp.ssrContext.geinsCoreInstance = new GeinsCore(settings);
      }
      geinsCoreInstance.value = nuxtApp.ssrContext?.geinsCoreInstance as GeinsCore;
    } else {
      // Client-side: Persist the same instance across navigation
      if (!geinsCoreInstance.value) {
        geinsCoreInstance.value = new GeinsCore(settings);
      }
    }
    return geinsCoreInstance.value as GeinsCore;
  };

  const createGeinsOMS = async (core: GeinsCore): Promise<GeinsOMS> => {
    const isSSR = import.meta.server;
    if (isSSR) {
      if (nuxtApp.ssrContext && !nuxtApp.ssrContext?.geinsOMSInstance) {
        nuxtApp.ssrContext.geinsOMSInstance = new GeinsOMS(core, {
          omsSettings: { context: RuntimeContext.HYBRID },
        });
      }
      geinsOMSInstance.value = nuxtApp.ssrContext?.geinsOMSInstance as GeinsOMS;
    } else {
      if (!geinsOMSInstance.value) {
        geinsOMSInstance.value = new GeinsOMS(core, {
          omsSettings: { context: RuntimeContext.HYBRID },
        });
      }
    }
    return geinsOMSInstance.value as GeinsOMS;
  };

  return {
    provide: {
      geinsCore: geinsCoreInstance,
      geinsOMS: geinsOMSInstance,
      createGeinsCore: createGeinsCore,
      createGeinsOMS: createGeinsOMS,
      createGeinsClient: async (settings: GeinsSettings): Promise<void> => {
        await createGeinsCore(settings);
        await createGeinsOMS(geinsCoreInstance.value as GeinsCore);
      },
    },
  };
});

================
File: app/utils/index.ts
================
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: app/app.vue
================
<script setup lang="ts">
const { title } = useCheckoutToken();
useHeadSafe({
  title: title.value || 'Geins Checkout',
});
</script>
<template>
  <NuxtPage />
</template>

================
File: app/error.vue
================
<script setup lang="ts">
import type { NuxtError } from '#app';
import Logo from '@/assets/logos/geins.svg';

const _props = defineProps({
  error: Object as () => NuxtError,
});
const debug = useRuntimeConfig().public.debug;
const handleError = () => clearError({ redirect: '/' });
</script>

<template>
  <NuxtLayout name="default" class="hidden lg:grid">
    <template #cart>
      <Logo :font-controlled="false" class="h-28 w-auto text-foreground" />
    </template>
    <template #checkout>
      <div class="flex h-screen flex-col items-center justify-center bg-card text-card-foreground">
        <h1 class="mb-2 text-xl font-bold">Error {{ error?.statusCode }}</h1>
        <p v-if="error?.message" class="mb-5">{{ error?.message }}</p>
        <p v-else>No message</p>
        <!-- eslint-disable-next-line vue/no-v-html -->
        <div v-if="debug" class="mb-5 max-w-xl text-xs" v-html="error?.stack" />
        <Button @click="handleError">Clear errors</Button>
      </div>
    </template>
  </NuxtLayout>
</template>

================
File: app/router.options.ts
================
import type { RouterConfig } from '@nuxt/schema';

export default {
  routes: (routes) => {
    const newRoutes = [...routes];
    newRoutes.push({
      name: `token`,
      path: `/:token`,
      component: () => import('~/pages/redirect.vue'),
      props: true,
    });
    newRoutes.push({
      name: `checkout-token`,
      path: `/checkout/:token`,
      component: () => import('~/pages/redirect.vue'),
      props: true,
    });
    newRoutes.push({
      name: `v0-token`,
      path: `/v0/:token`,
      component: () => import('~/pages/redirect.vue'),
      props: true,
    });

    return newRoutes;
  },
} satisfies RouterConfig;

================
File: public/placeholder.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>

================
File: public/robots.txt
================
User-agent: *
Disallow: /

================
File: shared/types/checkout.ts
================
import type { GeinsAddressType } from '@geins/types';

export const enum ExternalSnippetType {
  Checkout = 'checkout',
  Summary = 'summary',
}
export interface CheckoutFormType {
  email?: string;
  message?: string;
  identityNumber?: string;
  address?: GeinsAddressType;
}

export interface CheckoutState {
  email: string;
  identityNumber: string;
  message: string;
  billingAddress?: GeinsAddressType;
  shippingAddress?: GeinsAddressType;
  selectedPaymentId: number;
  selectedShippingId: number;
  externalSnippetHtml: string;
  useShippingAddress: boolean;
  showMessageInput: boolean;
}

export interface CompleteCheckoutResponse {
  success: boolean;
  orderId: string;
  publicOrderId: string;
  redirectUrl: string;
  message: string;
}

export interface CheckoutFormUpdateEvent {
  valid: boolean;
  touched: boolean;
  values: CheckoutFormType;
}

================
File: shared/types/composables.ts
================
import type { ExternalSnippetType } from '#shared/types';
import type {
  CartType,
  CheckoutBrandingType,
  CheckoutInputType,
  CheckoutQueryParameters,
  CheckoutRedirectsType,
  CheckoutSettings,
  CheckoutStyleType,
  CheckoutSummaryType,
  CheckoutTokenPayload,
  CheckoutType,
  CheckoutUrlsInputType,
  CreateOrderResponseType,
  GeinsSettings,
  GeinsUserType,
  PaymentOptionType,
  PriceType,
  ShippingOptionType,
} from '@geins/types';

export interface UseCheckoutComposable {
  state: Ref<CheckoutState>;
  checkoutLoading: Ref<boolean>;
  error: Ref<string>;
  checkoutSettings: ComputedRef<CheckoutSettings | undefined>;
  cart: ComputedRef<CartType | undefined>;
  cartEmpty: ComputedRef<boolean>;
  redirectUrls: ComputedRef<CheckoutRedirectsType | undefined>;
  currentCountryName: ComputedRef<string>;
  isPaymentInvoice: ComputedRef<boolean>;
  useManualCheckout: ComputedRef<boolean>;
  initializeCheckout: () => Promise<void>;
  updateCheckoutData: (type: 'billing' | 'shipping', data: CheckoutFormType) => Promise<void>;
  updateCheckout: () => Promise<void>;
  completeCheckout: () => Promise<CompleteCheckoutResponse>;
  getRedirectUrl: (response: CompleteCheckoutResponse) => string;
}

export interface UsePriceComposable {
  vatIncluded: Ref<boolean>;
  getSellingPrice: (price: PriceType) => string | undefined;
  getRegularPrice: (price: PriceType) => string | undefined;
}

export interface UseExternalSnippetComposable {
  externalSnippetHtml: Ref<string>;
  externalSnippetRendered: Ref<boolean>;
  suspended: Ref<boolean>;
  externalPaymentSelected: ComputedRef<boolean>;
  hasExternalSnippet: ComputedRef<boolean>;
  renderExternalSnippet: (type: ExternalSnippetType, payment?: PaymentOptionType) => Promise<void>;
  initExternalEventListeners: () => void;
  suspend: () => void;
  resume: () => void;
}

export interface UseSummaryComposable {
  checkoutLoading: Ref<boolean>;
  error: Ref<string>;
  cart: ComputedRef<CartType | undefined>;
  orderSummary: Ref<CheckoutSummaryType | undefined>;
  summaryOrderId: Ref<string>;
  initializeSummary: (orderId: string, checkoutQueryParams: CheckoutQueryParameters) => Promise<void>;
}

export interface UseCheckoutTokenComposable {
  token: Ref<string>;
  parsedCheckoutToken: Ref<CheckoutTokenPayload>;
  latestVersion: Ref<string>;
  latestCheckoutUrl: ComputedRef<string>;
  checkoutPageUrl: ComputedRef<string>;
  confirmationPageUrl: ComputedRef<string>;
  branding: Ref<CheckoutBrandingType | undefined>;
  iconFallback: ComputedRef<string | undefined>;
  icon: ComputedRef<string | undefined>;
  logo: ComputedRef<string | undefined>;
  title: ComputedRef<string | undefined>;
  urls: Ref<CheckoutRedirectsType | undefined>;
  getProductImageUrl: (filename?: string) => string | null;
  setCurrentVersion: (version?: string) => void;
  initSettingsFromToken: () => Promise<boolean>;
  parseToken: (token: string) => Promise<CheckoutTokenPayload>;
  parseStyles: (styles?: CheckoutStyleType) => void;
  setCssVarsToHead: () => Promise<void>;
}

export interface UseGeinsClientComposable {
  geinsSettings: Ref<GeinsSettings | undefined>;
  checkoutSettings: Ref<CheckoutSettings | undefined>;
  cart: Ref<CartType | undefined>;
  paymentMethods: Ref<PaymentOptionType[]>;
  shippingMethods: Ref<ShippingOptionType[]>;
  user: Ref<GeinsUserType | undefined>;
  checkoutObject: Ref<CheckoutType | undefined>;
  redirectUrls: Ref<CheckoutRedirectsType | undefined>;
  checkoutUrls: Ref<CheckoutUrlsInputType | undefined>;
  orderSummary: Ref<CheckoutSummaryType | undefined>;
  selectedPaymentMethod: ComputedRef<PaymentOptionType | undefined>;
  selectedShippingMethod: ComputedRef<ShippingOptionType | undefined>;
  currentCountryName: Ref<string>;
  initializeSummary: () => Promise<boolean>;
  initializeCheckout: (checkoutOptions: CheckoutInputType) => Promise<void>;
  getCheckout: (
    options?: {
      paymentMethodId?: number;
      shippingMethodId?: number;
      checkoutOptions?: CheckoutInputType;
    },
    useSSR?: boolean,
  ) => Promise<CheckoutType>;
  getCheckoutSummary: (
    orderId: string,
    paymentMethod: string,
    cartId: string,
  ) => Promise<CheckoutSummaryType | undefined>;
  updateCheckout: (options?: {
    paymentMethodId?: number;
    shippingMethodId?: number;
    checkoutOptions?: CheckoutInputType;
  }) => Promise<void>;
  updateCheckoutUrlWithParameters: (args: { url: string; paymentMethodId: number }) => string;
  createOrder: (checkoutInput: {
    cartId: string;
    checkoutOptions: CheckoutInputType;
  }) => Promise<CreateOrderResponseType>;
  completeCart: () => Promise<boolean>;
}

/* eslint-disable @typescript-eslint/no-explicit-any */
export interface UseGeinsLogComposable {
  geinsLog: (...args: any[]) => void;
  geinsLogError: (...args: any[]) => void;
  geinsLogInfo: (...args: any[]) => void;
  geinsLogWarn: (...args: any[]) => void;
}

================
File: shared/types/index.ts
================
export * from './checkout';
export * from './composables';

================
File: shared/utils/log.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import chalk from 'chalk';

type LogMethod = 'log' | 'warn' | 'error' | 'info';
interface GeinsLogger {
  geinsLog: (...args: any[]) => void;
  geinsLogWarn: (...args: any[]) => void;
  geinsLogError: (...args: any[]) => void;
  geinsLogInfo: (...args: any[]) => void;
}

/**
 * Utility to log messages with a Geins tag
 *
 * @returns Four logger functions: `geinsLog`, `geinsLogWarn`, `geinsLogError`, and `geinsLogInfo`
 */
export function log(scope?: string, debug: boolean = false): GeinsLogger {
  if (import.meta.nitro || import.meta.server) {
    debug = import.meta.env.GEINS_DEBUG === 'true';
  }
  const logTag = '%cgeins';
  const logStyle =
    'background-color: #e8452c; color: #FFFFFF; padding: 2px 8px; border-radius: 5px; font-weight:bold; letter-spacing:0.2em; font-size:1.1em; margin-right:5px;';

  const createLogger = (method: LogMethod, alwaysLog: boolean = false) => {
    return (message: any, ...args: any[]) => {
      if (!alwaysLog && !debug) {
        return;
      }
      let formattedMessage = scope ? `${scope} ::: ${message}` : message;
      if (import.meta.nitro || import.meta.server) {
        formattedMessage = scope ? `${chalk.bold.bgBlack(scope)} ::: ${message}` : message;
        console[method](`${chalk.bgWhite.bold.red(' geins ')} ${formattedMessage}`, ...args);
      } else {
        console[method](logTag, logStyle, formattedMessage, ...args);
      }
    };
  };

  const geinsLog = createLogger('log');
  const geinsLogWarn = createLogger('warn', true);
  const geinsLogError = createLogger('error', true);
  const geinsLogInfo = createLogger('info', true);
  return {
    /**
     * Function to log a message when debug is enabled
     */
    geinsLog,
    /**
     * Function to log a warning message
     */
    geinsLogWarn,
    /**
     * Function to log an error message
     */
    geinsLogError,
    /**
     * Function to log an info message
     */
    geinsLogInfo,
  };
}

================
File: test/e2e-klarna.test.ts
================
import { describe, expect, test } from 'vitest';
import checkoutPage from '../app/pages/v0/checkout/[token].vue';

import { mockNuxtImport, mountSuspended } from '@nuxt/test-utils/runtime';
// const tokenWithManualInvoiceLogoAndYellowAccentColor =
// 'eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJjYXJ0SWQiOiJmNmNhMDAwOC0zNTE4LTQwM2YtYWFjZC04MWRlYzY4MmExNDgiLCJ1c2VyIjp7ImlkIjowLCJlbWFpbCI6IiIsImFkZHJlc3MiOnsicGhvbmUiOiIiLCJtb2JpbGUiOiIiLCJjb21wYW55IjoiIiwiZmlyc3ROYW1lIjoiIiwibGFzdE5hbWUiOiIiLCJhZGRyZXNzTGluZTEiOiIiLCJhZGRyZXNzTGluZTIiOiIiLCJhZGRyZXNzTGluZTMiOiIiLCJ6aXAiOiIiLCJjYXJlT2YiOiIiLCJjaXR5IjoiIiwic3RhdGUiOiIiLCJjb3VudHJ5IjoiIiwiZW50cnlDb2RlIjoiIn19LCJjaGVja291dFNldHRpbmdzIjp7ImlzQ2FydEVkaXRhYmxlIjpmYWxzZSwiY29weUNhcnQiOnRydWUsInNlbGVjdGVkUGF5bWVudE1ldGhvZElkIjoxOCwic2VsZWN0ZWRTaGlwcGluZ01ldGhvZElkIjoxLCJjdXN0b21lclR5cGUiOiJQRVJTT04iLCJyZWRpcmVjdFVybHMiOnt9LCJicmFuZGluZyI6eyJ0aXRsZSI6IiIsImljb24iOiIiLCJsb2dvIjoiaHR0cHM6Ly9kb2NzLmdlaW5zLmlvL2ltZy9sb2dvLWJsYWNrLnN2ZyIsInN0eWxlcyI6eyJsb2dvU2l6ZSI6IjJyZW0iLCJyYWRpdXMiOiIiLCJiYWNrZ3JvdW5kIjoiI2Y3ZjdmNyIsImZvcmVncm91bmQiOiIjMTMxMzEzIiwiY2FyZCI6IiNmZmZmZmYiLCJjYXJkRm9yZWdyb3VuZCI6IiMxMzEzMTMiLCJhY2NlbnQiOiIjZmZhYTAwIiwiYWNjZW50Rm9yZWdyb3VuZCI6IiNmZmZmZmYiLCJib3JkZXIiOiIjZWJlYmViIiwic2FsZSI6IiNlNjAwMDAiLCJlcnJvciI6IiNiMDAwMjAifX19LCJnZWluc1NldHRpbmdzIjp7ImVudmlyb25tZW50IjoicHJvZCIsImFwaUtleSI6IkJENjc5RkYwLTA1QkUtNDg3Ni1CNTRDLUYxNkRGREI4RTk2NyIsImFjY291bnROYW1lIjoibGFicyIsImNoYW5uZWwiOiIxIiwidGxkIjoic2UiLCJsb2NhbGUiOiJzdi1TRSIsIm1hcmtldCI6InNlIn19';
mockNuxtImport('useRoute', () => () => ({
  params: {
    token:
      'eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJjYXJ0SWQiOiJmNmNhMDAwOC0zNTE4LTQwM2YtYWFjZC04MWRlYzY4MmExNDgiLCJ1c2VyIjp7ImlkIjowLCJlbWFpbCI6IiIsImFkZHJlc3MiOnsicGhvbmUiOiIiLCJtb2JpbGUiOiIiLCJjb21wYW55IjoiIiwiZmlyc3ROYW1lIjoiIiwibGFzdE5hbWUiOiIiLCJhZGRyZXNzTGluZTEiOiIiLCJhZGRyZXNzTGluZTIiOiIiLCJhZGRyZXNzTGluZTMiOiIiLCJ6aXAiOiIiLCJjYXJlT2YiOiIiLCJjaXR5IjoiIiwic3RhdGUiOiIiLCJjb3VudHJ5IjoiIiwiZW50cnlDb2RlIjoiIn19LCJjaGVja291dFNldHRpbmdzIjp7ImlzQ2FydEVkaXRhYmxlIjpmYWxzZSwiY29weUNhcnQiOnRydWUsInNlbGVjdGVkUGF5bWVudE1ldGhvZElkIjoyMywic2VsZWN0ZWRTaGlwcGluZ01ldGhvZElkIjoxLCJjdXN0b21lclR5cGUiOiJQRVJTT04iLCJyZWRpcmVjdFVybHMiOnt9LCJicmFuZGluZyI6eyJ0aXRsZSI6IiIsImljb24iOiIiLCJsb2dvIjoiIiwic3R5bGVzIjp7ImxvZ29TaXplIjoiMnJlbSIsInJhZGl1cyI6IiIsImJhY2tncm91bmQiOiIjZjdmN2Y3IiwiZm9yZWdyb3VuZCI6IiMxMzEzMTMiLCJjYXJkIjoiI2ZmZmZmZiIsImNhcmRGb3JlZ3JvdW5kIjoiIzEzMTMxMyIsImFjY2VudCI6IiMxMzEzMTMiLCJhY2NlbnRGb3JlZ3JvdW5kIjoiI2ZmZmZmZiIsImJvcmRlciI6IiNlYmViZWIiLCJzYWxlIjoiI2U2MDAwMCIsImVycm9yIjoiI2IwMDAyMCJ9fX0sImdlaW5zU2V0dGluZ3MiOnsiZW52aXJvbm1lbnQiOiJwcm9kIiwiYXBpS2V5IjoiQkQ2NzlGRjAtMDVCRS00ODc2LUI1NEMtRjE2REZEQjhFOTY3IiwiYWNjb3VudE5hbWUiOiJsYWJzIiwiY2hhbm5lbCI6IjEiLCJ0bGQiOiJzZSIsImxvY2FsZSI6InN2LVNFIiwibWFya2V0Ijoic2UifX0',
  },
  meta: {
    layoutTransition: {
      name: 'fade',
      mode: 'out-in',
    },
  },
}));

describe('Checkout Flow', () => {
  test('Renders Klarna Checkout', async () => {
    const wrapper = await mountSuspended(checkoutPage);
    console.log('🚀 ~ test ~ wrapper:', wrapper.html());
    expect(wrapper.exists()).toBe(true);
    expect(wrapper.html()).toContain('klarna-express-checkout');
  });
});

================
File: test/vitest.setup.ts
================
import { config } from '@vue/test-utils';
import { createI18n } from 'vue-i18n';
const i18n = createI18n({});
config.global.plugins = [i18n];

================
File: .gitignore
================
# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
.yarn
.temp
.vitepress
dist

# Node dependencies
node_modules

# Logs
logs
*.log

# Misc
.DS_Store
.fleet
.idea
.temp
repomix.config.json

# Local env files
.env
.env.*
!.env.example


# vitepress docs
docs/.vitepress/dist
docs/.vitepress/cache

================
File: .prettierrc
================
{
  "plugins": [
    "prettier-plugin-vue",
    "prettier-plugin-tailwindcss",
    "prettier-plugin-organize-imports"
  ],
  "tabWidth": 2,
  "useTabs": false,
  "endOfLine": "auto",
  "singleQuote": true,
  "semi": true,
  "printWidth": 110
}

================
File: .yarnrc.yml
================
nodeLinker: node-modules

================
File: components.json
================
{
  "$schema": "https://shadcn-vue.com/schema.json",
  "style": "default",
  "typescript": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/assets/css/tailwind.css",
    "baseColor": "stone",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "composables": "@/composables",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib"
  },
  "iconLibrary": "lucide"
}

================
File: eslint.config.js
================
import { createConfigForNuxt } from '@nuxt/eslint-config/flat';
import pkg from 'eslint-plugin-prettier/recommended';

import tailwind from 'eslint-plugin-tailwindcss';
const { eslintPluginPrettierRecommended } = pkg;

export default createConfigForNuxt()
  .append(eslintPluginPrettierRecommended)
  .append(tailwind.configs['flat/recommended'])
  .append({
    rules: {
      'vue/require-default-prop': 'off',
      'vue/no-multiple-template-root': 'off',
      'vue/multi-word-component-names': 'off',
      'vue/html-self-closing': [
        'warn',
        {
          html: {
            void: 'any',
            normal: 'always',
            component: 'always',
          },
          svg: 'always',
          math: 'always',
        },
      ],
      'tailwindcss/no-custom-classname': 'off',
    },
  });

================
File: geins-checkout.code-workspace
================
{
  "folders": [
    {
      "path": ".",
    },
  ],
  "settings": {
    "prettier.configPath": ".prettierrc",
    "editor.formatOnPaste": false,
    "editor.formatOnType": false,
    "editor.formatOnSave": true,
    "scss.lint.unknownAtRules": "ignore",
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "eslint.format.enable": true,
    "prettier.useEditorConfig": false,
    "typescript.tsdk": "node_modules\\typescript\\lib",
  },
}

================
File: LICENSE
================
MIT License

Copyright (c) 2025 geins.io

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: nuxt.config.ts
================
const nitroPreset = {
  nitro: {
    preset: process.env.NITRO_PRESET,
  },
};

export default defineNuxtConfig({
  future: {
    compatibilityVersion: 4,
  },

  devtools: { enabled: true },
  modules: [
    '@nuxtjs/tailwindcss',
    '@nuxtjs/i18n',
    'shadcn-nuxt',
    'nuxt-svgo',
    'nuxt-lucide-icons',
    '@nuxt/image',
    '@formkit/auto-animate/nuxt',
  ],

  image: {
    domains: [process.env.PRODUCT_IMAGE_DOMAIN || ''],
  },

  shadcn: {
    prefix: '',
    componentDir: './app/components/ui',
  },

  i18n: {
    defaultLocale: 'en',
    langDir: 'lang/',
    locales: [{ code: 'en', language: 'en-US', file: 'en-US.ts' }],
  },

  runtimeConfig: {
    public: {
      debug: process.env.GEINS_DEBUG === 'true',
      latestVersion: process.env.LATEST_VERSION || 'v0',
      baseUrl: process.env.BASE_URL || 'http://localhost:3000',
      productImageDomain: process.env.PRODUCT_IMAGE_DOMAIN || 'commerce.services',
      productImageBaseUrl:
        process.env.PRODUCT_IMAGE_BASE_URL || 'https://{ACCOUNT_NAME}.{DOMAIN}/product/raw/',
    },
    private: {},
  },

  sourcemap: {
    server: false,
    client: true,
  },

  ...(process.env.NITRO_PRESET ? nitroPreset : {}),

  compatibilityDate: '2025-02-11',
});

================
File: package.json
================
{
  "name": "geins-checkout",
  "version": "0.1.0",
  "author": "Geins",
  "private": true,
  "license": "MIT",
  "type": "module",
  "scripts": {
    "build": "nuxi build",
    "dev": "nuxi dev",
    "generate": "nuxi generate",
    "preview": "nuxi preview",
    "postinstall": "nuxi prepare",
    "docs:dev": "vitepress dev docs",
    "docs:build": "vitepress build docs",
    "lint": "eslint . --fix",
    "link:geins": "yarn link @geins/core & yarn link @geins/oms & yarn link @geins/cms & yarn link @geins/crm & yarn link @geins/types & yarn link @geins/eslint-config",
    "link:core": "yarn link @geins/core",
    "link:oms": "yarn link @geins/oms",
    "test": "vitest",
    "docs": "vitepress dev docs --port 3010",
    "changelog:release": "changelogen --bump --release --push"
  },
  "dependencies": {
    "@formkit/auto-animate": "^0.8.2",
    "@geins/core": "0.5.0-canary-9d8fec2d68aad073e5e2bfe1ca467d9985cf1699",
    "@geins/oms": "0.5.0-canary-9d8fec2d68aad073e5e2bfe1ca467d9985cf1699",
    "@nuxt/image": "1.9.0",
    "@nuxtjs/color-mode": "3.5.2",
    "@nuxtjs/i18n": "^8.3.1",
    "@nuxtjs/tailwindcss": "^6.12.0",
    "@radix-icons/vue": "^1.0.0",
    "@vee-validate/zod": "^4.15.0",
    "@vueuse/core": "^12.8.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "happy-dom": "^17.4.4",
    "lucide-vue-next": "^0.476.0",
    "nuxt": "^3.14.1592",
    "nuxt-lucide-icons": "1.0.5",
    "nuxt-svgo": "^4.0.1",
    "radix-vue": "^1.9.13",
    "reka-ui": "^2.0.2",
    "shadcn-nuxt": "0.11.3",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "vee-validate": "^4.15.0",
    "vue": "^3.4.29",
    "vue-router": "^4.3.3",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@geins/types": "0.5.0-canary-9d8fec2d68aad073e5e2bfe1ca467d9985cf1699",
    "@nuxt/devtools": "^1.5.0",
    "@nuxt/eslint-config": "0.6.0",
    "@nuxt/test-utils": "^3.13.1",
    "@types/node-fetch": "^2.6.11",
    "@vue/test-utils": "^2.4.6",
    "changelogen": "^0.5.7",
    "eslint": "^9.5.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "eslint-plugin-tailwindcss": "^3.17.5",
    "prettier": "^3.3.3",
    "prettier-plugin-organize-imports": "^4.1.0",
    "prettier-plugin-tailwindcss": "^0.6.8",
    "prettier-plugin-vue": "^1.1.6",
    "typescript": "^5.4.5",
    "vitepress": "^1.2.3",
    "vitest": "^3.1.1"
  },
  "packageManager": "yarn@1.22.22",
  "engines": {
    "node": ">=20"
  }
}

================
File: README.md
================
# Geins Checkout

A modern, fun, and developer-friendly checkout solution for Geins e-commerce backend. Use it to generate sells and manage transactions even if you don’t have a full storefront, or use it as the Checkout for your storefront.

Built on the [Geins SDK](https://github.com/geins-io/geins-sdk), Geins Checkout is all about making life easier for developers. Whether you opt for our hosted version or choose to clone and self-host this repository, you get a plug-and-play solution that prioritizes developer happiness.

## Features

- 🌐 **Universal Checkout:** A complete checkout solution for ecommerce — even without a storefront.
- 🎨 **Custom Branding:** Tweak details to match your unique look and feel.
- 💳 **Payment Methods Galore:** Integrates with almost every payment provider available.
- 🛠️ **Built on Geins SDK:** Leverages our powerful SDK to streamline your checkout experience.
- 🚀 **Flexible Deployment:** Use our hosted version or clone the repo to run it on your own infrastructure.
- 😊 **Developer Happiness:** Designed with a focus on simplicity, flexibility, and fun.

## Latest Release

The latest version released is **v0**. It was released on **2025-04-03**.

## Usage Options

There are two ways to use Geins Checkout:

1. **Hosted Version:** Use our hassle-free, cloud-hosted version: [Geins Checkout](https://checkout.geins.services/)
2. **Self-Hosted:** Clone this repository and deploy it on your own server or preferred platform.

## Getting Started - Hosted Version

### Prerequisites

- A Geins account
- A generated [checkout token](#configure-your-checkout-token)

### Configure your Checkout Token

The checkout works with the help of a generated checkout token. You can generate a checkout token in two ways:

1. Using the Geins SDK
2. Using the form in the Geins SDK documentation

Read how and generate your token [here](https://sdk.geins.dev/guide/examples/generate-checkout-token.html)

### Using the Checkout Token

Once you have generated your token, you can visit your checkout by using the following URL:

**https://checkout.geins.services/{YOUR_CHECKOUT_TOKEN}**

## Getting Started - Self-Hosted

### Prerequisites

- Node.js (v20 or above)
- Package manager (npm, yarn, pnpm, etc.)
- A Geins account
- A generated [checkout token](#configure-your-checkout-token)

### Setup steps

1. **Clone this repo**

   ```bash
   git clone https://github.com/geins-io/geins-checkout.git
   cd geins-checkout
   ```

2. **Install Dependencies**

   ```bash
   # npm
   npm install

   # yarn
   yarn install
   ```

3. **Set Up Environment Variables**

   Create an `.env` file in the project root and configure the following variables:

   ```ini
   GEINS_DEBUG=true
   LATEST_VERSION=v0
   BASE_URL=https://localhost:3000
   PRODUCT_IMAGE_DOMAIN=commerce.services
   PRODUCT_IMAGE_BASE_URL=https://{ACCOUNT_NAME}.{DOMAIN}/product/raw/
   ```

4. **Start the Development Server**

   ```bash
   # npm
   npm run dev

   # yarn
   yarn dev
   ```

   Your checkout will be available at **http://localhost:3000/{YOUR_CHECKOUT_TOKEN}**.

## Build with

- **Framework:** [Nuxt.js](https://nuxt.com)
- **Language:** [TypeScript](https://www.typescriptlang.org)
- **UI Library:** [shadcn-vue](https://www.shadcn-vue.com)
- **Styling:** [Tailwind CSS](https://tailwindcss.com)

## Contributing

Contributions to this repo are very welcome!

## License

This project is licensed under the MIT License.

## Acknowledgements

Built with love on top of the [Geins SDK](https://github.com/geins-io/geins-sdk).

<!-- Badges -->

[nuxt-src]: https://img.shields.io/badge/Nuxt-020420?logo=nuxt.js
[nuxt-href]: https://nuxt.com

================
File: staticwebapp.config.json
================
{
  "routes": [
    {
      "route": "/index.html",
      "redirect": "/"
    },
    {
      "route": "/",
      "rewrite": "/api/server"
    }
  ],
  "platform": {
    "apiRuntime": "node:20"
  },
  "navigationFallback": {
    "rewrite": "/api/server"
  }
}

================
File: tailwind.config.js
================
const animate = require('tailwindcss-animate');

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ['class'],
  safelist: ['dark'],
  prefix: '',

  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        ring: 'hsl(var(--accent))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        sale: 'hsl(var(--sale))',
        error: 'hsl(var(--error))',
      },
      height: {
        logo: 'var(--logo-size)',
      },
      fontSize: {
        body: 'var(--font-size)',
      },
      borderRadius: {
        xl: 'calc(var(--radius) + 4px)',
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: { height: 0 },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: 0 },
        },
        'collapsible-down': {
          from: { height: 0 },
          to: { height: 'var(--radix-collapsible-content-height)' },
        },
        'collapsible-up': {
          from: { height: 'var(--radix-collapsible-content-height)' },
          to: { height: 0 },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
        'collapsible-down': 'collapsible-down 0.2s ease-in-out',
        'collapsible-up': 'collapsible-up 0.2s ease-in-out',
      },
    },
  },
  plugins: [animate],
};

================
File: TODO.md
================
# Geins Checkout TODOs

### Before v0 release

- [ ] Add tests

### After v0 release

- [ ] Ability to change the cart in the checkout
- [ ] Add a discount code to the order
- [ ] Add a way to add custom fields to the checkout form
- [ ] User authentication
- [ ] Special Avarda implementations
- [ ] Fix so that all external checkouts works properly
- [ ] Show address in step 2 for Geins Pay - with option to edit

================
File: tsconfig.json
================
{
  // https://nuxt.com/docs/guide/concepts/typescript
  "extends": "./.nuxt/tsconfig.json"
}

================
File: vitest.config.ts
================
import { defineVitestConfig } from '@nuxt/test-utils/config';

export default defineVitestConfig({
  test: {
    environment: 'nuxt',
    setupFiles: ['./test/vitest.setup.ts'],
  },
});
